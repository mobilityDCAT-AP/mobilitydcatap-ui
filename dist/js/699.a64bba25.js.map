{"version":3,"file":"js/699.a64bba25.js","mappings":"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","sources":["webpack://mobilitydcatap-ui/./node_modules/@bergos/jsonparse/jsonparse.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/index.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/ContextParser.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/ErrorCoded.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/IDocumentLoader.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/JsonLdContext.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/Util.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/index.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/ContextTree.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/JsonLdParser.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/ParsingContext.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/Util.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordAnnotation.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/parser-jsonld/lib/ParserStream.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/parser-jsonld/index.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/sink/index.js","webpack://mobilitydcatap-ui/./node_modules/duplex-to/readable.js"],"sourcesContent":["var { Buffer } = require('buffer')\n// Named constants with unique integer values\nvar C = {};\n// Tokens\nvar LEFT_BRACE    = C.LEFT_BRACE    = 0x1;\nvar RIGHT_BRACE   = C.RIGHT_BRACE   = 0x2;\nvar LEFT_BRACKET  = C.LEFT_BRACKET  = 0x3;\nvar RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;\nvar COLON         = C.COLON         = 0x5;\nvar COMMA         = C.COMMA         = 0x6;\nvar TRUE          = C.TRUE          = 0x7;\nvar FALSE         = C.FALSE         = 0x8;\nvar NULL          = C.NULL          = 0x9;\nvar STRING        = C.STRING        = 0xa;\nvar NUMBER        = C.NUMBER        = 0xb;\n// Tokenizer States\nvar START   = C.START   = 0x11;\nvar STOP    = C.STOP    = 0x12;\nvar TRUE1   = C.TRUE1   = 0x21;\nvar TRUE2   = C.TRUE2   = 0x22;\nvar TRUE3   = C.TRUE3   = 0x23;\nvar FALSE1  = C.FALSE1  = 0x31;\nvar FALSE2  = C.FALSE2  = 0x32;\nvar FALSE3  = C.FALSE3  = 0x33;\nvar FALSE4  = C.FALSE4  = 0x34;\nvar NULL1   = C.NULL1   = 0x41;\nvar NULL2   = C.NULL2   = 0x42;\nvar NULL3   = C.NULL3   = 0x43;\nvar NUMBER1 = C.NUMBER1 = 0x51;\nvar NUMBER3 = C.NUMBER3 = 0x53;\nvar STRING1 = C.STRING1 = 0x61;\nvar STRING2 = C.STRING2 = 0x62;\nvar STRING3 = C.STRING3 = 0x63;\nvar STRING4 = C.STRING4 = 0x64;\nvar STRING5 = C.STRING5 = 0x65;\nvar STRING6 = C.STRING6 = 0x66;\n// Parser States\nvar VALUE   = C.VALUE   = 0x71;\nvar KEY     = C.KEY     = 0x72;\n// Parser Modes\nvar OBJECT  = C.OBJECT  = 0x81;\nvar ARRAY   = C.ARRAY   = 0x82;\n// Character constants\nvar BACK_SLASH =      \"\\\\\".charCodeAt(0);\nvar FORWARD_SLASH =   \"\\/\".charCodeAt(0);\nvar BACKSPACE =       \"\\b\".charCodeAt(0);\nvar FORM_FEED =       \"\\f\".charCodeAt(0);\nvar NEWLINE =         \"\\n\".charCodeAt(0);\nvar CARRIAGE_RETURN = \"\\r\".charCodeAt(0);\nvar TAB =             \"\\t\".charCodeAt(0);\n\nvar STRING_BUFFER_SIZE = 64 * 1024;\n\nfunction alloc(size) {\n  return Buffer.alloc ? Buffer.alloc(size) : new Buffer(size);\n}\n\nfunction Parser() {\n  this.tState = START;\n  this.value = undefined;\n\n  this.string = undefined; // string data\n  this.stringBuffer = alloc(STRING_BUFFER_SIZE);\n  this.stringBufferOffset = 0;\n  this.unicode = undefined; // unicode escapes\n  this.highSurrogate = undefined;\n\n  this.key = undefined;\n  this.mode = undefined;\n  this.stack = [];\n  this.state = VALUE;\n  this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n  this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n  this.temp_buffs = { \"2\": alloc(2), \"3\": alloc(3), \"4\": alloc(4) }; // for rebuilding chars split before boundary is reached\n\n  // Stream offset\n  this.offset = -1;\n}\n\n// Slow code to string converter (only used when throwing syntax errors)\nParser.toknam = function (code) {\n  var keys = Object.keys(C);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    if (C[key] === code) { return key; }\n  }\n  return code && (\"0x\" + code.toString(16));\n};\n\nvar proto = Parser.prototype;\nproto.onError = function (err) { throw err; };\nproto.charError = function (buffer, i) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + JSON.stringify(String.fromCharCode(buffer[i])) + \" at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n};\nproto.appendStringChar = function (char) {\n  if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8');\n    this.stringBufferOffset = 0;\n  }\n\n  this.stringBuffer[this.stringBufferOffset++] = char;\n};\nproto.appendStringBuf = function (buf, start, end) {\n  var size = buf.length;\n  if (typeof start === 'number') {\n    if (typeof end === 'number') {\n      if (end < 0) {\n        // adding a negative end decreeses the size\n        size = buf.length - start + end;\n      } else {\n        size = end - start;\n      }\n    } else {\n      size = buf.length - start;\n    }\n  }\n\n  if (size < 0) {\n    size = 0;\n  }\n\n  if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n    this.stringBufferOffset = 0;\n  }\n\n  buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);\n  this.stringBufferOffset += size;\n};\nproto.write = function (buffer) {\n  if (typeof buffer === \"string\") buffer = new Buffer(buffer);\n  var n;\n  for (var i = 0, l = buffer.length; i < l; i++) {\n    if (this.tState === START){\n      n = buffer[i];\n      this.offset++;\n      if(n === 0x7b){ this.onToken(LEFT_BRACE, \"{\"); // {\n      }else if(n === 0x7d){ this.onToken(RIGHT_BRACE, \"}\"); // }\n      }else if(n === 0x5b){ this.onToken(LEFT_BRACKET, \"[\"); // [\n      }else if(n === 0x5d){ this.onToken(RIGHT_BRACKET, \"]\"); // ]\n      }else if(n === 0x3a){ this.onToken(COLON, \":\");  // :\n      }else if(n === 0x2c){ this.onToken(COMMA, \",\"); // ,\n      }else if(n === 0x74){ this.tState = TRUE1;  // t\n      }else if(n === 0x66){ this.tState = FALSE1;  // f\n      }else if(n === 0x6e){ this.tState = NULL1; // n\n      }else if(n === 0x22){ // \"\n        this.string = \"\";\n        this.stringBufferOffset = 0;\n        this.tState = STRING1;\n      }else if(n === 0x2d){ this.string = \"-\"; this.tState = NUMBER1; // -\n      }else{\n        if (n >= 0x30 && n < 0x40) { // 1-9\n          this.string = String.fromCharCode(n); this.tState = NUMBER3;\n        } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) {\n          // whitespace\n        } else {\n          return this.charError(buffer, i);\n        }\n      }\n    }else if (this.tState === STRING1){ // After open quote\n      n = buffer[i]; // get current byte from buffer\n      // check for carry over of a multi byte char split between data chunks\n      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n      if (this.bytes_remaining > 0) {\n        for (var j = 0; j < this.bytes_remaining; j++) {\n          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];\n        }\n\n        this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);\n        this.bytes_in_sequence = this.bytes_remaining = 0;\n        i = i + j - 1;\n      } else if (this.bytes_remaining === 0 && n >= 128) { // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time\n        if (n <= 193 || n > 244) {\n          return this.onError(new Error(\"Invalid UTF-8 character at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n        }\n        if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;\n        if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;\n        if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;\n        if ((this.bytes_in_sequence + i) > buffer.length) { // if bytes needed to complete char fall outside buffer length, we have a boundary split\n          for (var k = 0; k <= (buffer.length - 1 - i); k++) {\n            this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk\n          }\n          this.bytes_remaining = (i + this.bytes_in_sequence) - buffer.length;\n          i = buffer.length - 1;\n        } else {\n          this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);\n          i = i + this.bytes_in_sequence - 1;\n        }\n      } else if (n === 0x22) {\n        this.tState = START;\n        this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n        this.stringBufferOffset = 0;\n        this.onToken(STRING, this.string);\n        this.offset += Buffer.byteLength(this.string, 'utf8') + 1;\n        this.string = undefined;\n      }\n      else if (n === 0x5c) {\n        this.tState = STRING2;\n      }\n      else if (n >= 0x20) { this.appendStringChar(n); }\n      else {\n          return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING2){ // After backslash\n      n = buffer[i];\n      if(n === 0x22){ this.appendStringChar(n); this.tState = STRING1;\n      }else if(n === 0x5c){ this.appendStringChar(BACK_SLASH); this.tState = STRING1;\n      }else if(n === 0x2f){ this.appendStringChar(FORWARD_SLASH); this.tState = STRING1;\n      }else if(n === 0x62){ this.appendStringChar(BACKSPACE); this.tState = STRING1;\n      }else if(n === 0x66){ this.appendStringChar(FORM_FEED); this.tState = STRING1;\n      }else if(n === 0x6e){ this.appendStringChar(NEWLINE); this.tState = STRING1;\n      }else if(n === 0x72){ this.appendStringChar(CARRIAGE_RETURN); this.tState = STRING1;\n      }else if(n === 0x74){ this.appendStringChar(TAB); this.tState = STRING1;\n      }else if(n === 0x75){ this.unicode = \"\"; this.tState = STRING3;\n      }else{\n        return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6){ // unicode hex codes\n      n = buffer[i];\n      // 0-9 A-F a-f\n      if ((n >= 0x30 && n < 0x40) || (n > 0x40 && n <= 0x46) || (n > 0x60 && n <= 0x66)) {\n        this.unicode += String.fromCharCode(n);\n        if (this.tState++ === STRING6) {\n          var intVal = parseInt(this.unicode, 16);\n          this.unicode = undefined;\n          if (this.highSurrogate !== undefined && intVal >= 0xDC00 && intVal < (0xDFFF + 1)) { //<56320,57343> - lowSurrogate\n            this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate, intVal)));\n            this.highSurrogate = undefined;\n          } else if (this.highSurrogate === undefined && intVal >= 0xD800 && intVal < (0xDBFF + 1)) { //<55296,56319> - highSurrogate\n            this.highSurrogate = intVal;\n          } else {\n            if (this.highSurrogate !== undefined) {\n              this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate)));\n              this.highSurrogate = undefined;\n            }\n            this.appendStringBuf(new Buffer(String.fromCharCode(intVal)));\n          }\n          this.tState = STRING1;\n        }\n      } else {\n        return this.charError(buffer, i);\n      }\n    } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {\n        n = buffer[i];\n\n        switch (n) {\n          case 0x30: // 0\n          case 0x31: // 1\n          case 0x32: // 2\n          case 0x33: // 3\n          case 0x34: // 4\n          case 0x35: // 5\n          case 0x36: // 6\n          case 0x37: // 7\n          case 0x38: // 8\n          case 0x39: // 9\n          case 0x2e: // .\n          case 0x65: // e\n          case 0x45: // E\n          case 0x2b: // +\n          case 0x2d: // -\n            this.string += String.fromCharCode(n);\n            this.tState = NUMBER3;\n            break;\n          default:\n            this.tState = START;\n            var error = this.numberReviver(this.string, buffer, i);\n            if (error){\n              return error;\n            }\n\n            this.offset += this.string.length - 1;\n            this.string = undefined;\n            i--;\n            break;\n        }\n    }else if (this.tState === TRUE1){ // r\n      if (buffer[i] === 0x72) { this.tState = TRUE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE2){ // u\n      if (buffer[i] === 0x75) { this.tState = TRUE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE3){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(TRUE, true); this.offset+= 3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE1){ // a\n      if (buffer[i] === 0x61) { this.tState = FALSE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE2){ // l\n      if (buffer[i] === 0x6c) { this.tState = FALSE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE3){ // s\n      if (buffer[i] === 0x73) { this.tState = FALSE4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE4){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(FALSE, false); this.offset+= 4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL1){ // u\n      if (buffer[i] === 0x75) { this.tState = NULL2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL2){ // l\n      if (buffer[i] === 0x6c) { this.tState = NULL3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL3){ // l\n      if (buffer[i] === 0x6c) { this.tState = START; this.onToken(NULL, null); this.offset += 3; }\n      else { return this.charError(buffer, i); }\n    }\n  }\n};\nproto.onToken = function (token, value) {\n  // Override this to get events\n};\n\nproto.parseError = function (token, value) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + Parser.toknam(token) + (value ? (\"(\" + JSON.stringify(value) + \")\") : \"\") + \" in state \" + Parser.toknam(this.state)));\n};\nproto.push = function () {\n  this.stack.push({value: this.value, key: this.key, mode: this.mode});\n};\nproto.pop = function () {\n  var value = this.value;\n  var parent = this.stack.pop();\n  this.value = parent.value;\n  this.key = parent.key;\n  this.mode = parent.mode;\n  this.emit(value);\n  if (!this.mode) { this.state = VALUE; }\n};\nproto.emit = function (value) {\n  if (this.mode) { this.state = COMMA; }\n  this.onValue(value);\n};\nproto.onValue = function (value) {\n  // Override me\n};\nproto.onToken = function (token, value) {\n  if(this.state === VALUE){\n    if(token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL){\n      if (this.value) {\n        this.value[this.key] = value;\n      }\n      this.emit(value);\n    }else if(token === LEFT_BRACE){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = {};\n      } else {\n        this.value = {};\n      }\n      this.key = undefined;\n      this.state = KEY;\n      this.mode = OBJECT;\n    }else if(token === LEFT_BRACKET){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = [];\n      } else {\n        this.value = [];\n      }\n      this.key = 0;\n      this.mode = ARRAY;\n      this.state = VALUE;\n    }else if(token === RIGHT_BRACE){\n      if (this.mode === OBJECT) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else if(token === RIGHT_BRACKET){\n      if (this.mode === ARRAY) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else{\n      return this.parseError(token, value);\n    }\n  }else if(this.state === KEY){\n    if (token === STRING) {\n      this.key = value;\n      this.state = COLON;\n    } else if (token === RIGHT_BRACE) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else if(this.state === COLON){\n    if (token === COLON) { this.state = VALUE; }\n    else { return this.parseError(token, value); }\n  }else if(this.state === COMMA){\n    if (token === COMMA) {\n      if (this.mode === ARRAY) { this.key++; this.state = VALUE; }\n      else if (this.mode === OBJECT) { this.state = KEY; }\n\n    } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else{\n    return this.parseError(token, value);\n  }\n};\n\n// Override to implement your own number reviver.\n// Any value returned is treated as error and will interrupt parsing.\nproto.numberReviver = function (text, buffer, i) {\n  var result = Number(text);\n\n  if (isNaN(result)) {\n    return this.charError(buffer, i);\n  }\n\n  if ((text.match(/[0-9]+/) == text) && (result.toString() != text)) {\n    // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number\n    this.onToken(STRING, text);\n  } else {\n    this.onToken(NUMBER, result);\n  }\n}\n\nParser.C = C;\n\nmodule.exports = Parser;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/ContextParser\"), exports);\n__exportStar(require(\"./lib/ErrorCoded\"), exports);\n__exportStar(require(\"./lib/FetchDocumentLoader\"), exports);\n__exportStar(require(\"./lib/IDocumentLoader\"), exports);\n__exportStar(require(\"./lib/JsonLdContext\"), exports);\n__exportStar(require(\"./lib/JsonLdContextNormalized\"), exports);\n__exportStar(require(\"./lib/Util\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextParser = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst FetchDocumentLoader_1 = require(\"./FetchDocumentLoader\");\nconst JsonLdContextNormalized_1 = require(\"./JsonLdContextNormalized\");\nconst Util_1 = require(\"./Util\");\n/**\n * Parses JSON-LD contexts.\n */\nclass ContextParser {\n    constructor(options) {\n        options = options || {};\n        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();\n        this.documentCache = {};\n        this.validateContext = !options.skipValidation;\n        this.expandContentTypeToBase = !!options.expandContentTypeToBase;\n        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;\n        this.redirectSchemaOrgHttps = 'redirectSchemaOrgHttps' in options ? !!options.redirectSchemaOrgHttps : true;\n    }\n    /**\n     * Validate the given @language value.\n     * An error will be thrown if it is invalid.\n     * @param value An @language value.\n     * @param {boolean} strictRange If the string value should be strictly checked against a regex.\n     * @param {string} errorCode The error code to emit on errors.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateLanguage(value, strictRange, errorCode) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);\n        }\n        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {\n            if (strictRange) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Validate the given @direction value.\n     * An error will be thrown if it is invalid.\n     * @param value An @direction value.\n     * @param {boolean} strictValues If the string value should be strictly checked against a regex.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateDirection(value, strictValues) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n        }\n        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {\n            if (strictValues) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Add an @id term for all @reverse terms.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     */\n    idifyReverseTerms(context) {\n        for (const key of Object.keys(context)) {\n            let value = context[key];\n            if (value && typeof value === 'object') {\n                if (value['@reverse'] && !value['@id']) {\n                    if (typeof value['@reverse'] !== 'string' || Util_1.Util.isValidKeyword(value['@reverse'])) {\n                        throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value['@reverse']}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                    }\n                    value = context[key] = Object.assign(Object.assign({}, value), { '@id': value['@reverse'] });\n                    value['@id'] = value['@reverse'];\n                    if (Util_1.Util.isPotentialKeyword(value['@reverse'])) {\n                        delete value['@reverse'];\n                    }\n                    else {\n                        value['@reverse'] = true;\n                    }\n                }\n            }\n        }\n        return context;\n    }\n    /**\n     * Expand all prefixed terms in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded\n     *                                          via @base if @vocab is set to null.\n     * @param {string[]} keys Optional set of keys from the context to expand. If left undefined, all\n     * keys in the context will be expanded.\n     */\n    expandPrefixedTerms(context, expandContentTypeToBase, keys) {\n        const contextRaw = context.getContextRaw();\n        for (const key of (keys || Object.keys(contextRaw))) {\n            // Only expand allowed keys\n            if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {\n                // Error if we try to alias a keyword to something else.\n                const keyValue = contextRaw[key];\n                if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {\n                    if (key !== '@type' || typeof contextRaw[key] === 'object'\n                        && !(contextRaw[key]['@protected'] || contextRaw[key]['@container'] === '@set')) {\n                        throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                    }\n                }\n                // Error if we try to alias to an illegal keyword\n                if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {\n                    throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);\n                }\n                // Error if this term was marked as prefix as well\n                if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue))\n                    && keyValue['@prefix'] === true) {\n                    throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // Loop because prefixes might be nested\n                while (Util_1.Util.isPrefixValue(contextRaw[key])) {\n                    const value = contextRaw[key];\n                    let changed = false;\n                    if (typeof value === 'string') {\n                        contextRaw[key] = context.expandTerm(value, true);\n                        changed = changed || value !== contextRaw[key];\n                    }\n                    else {\n                        const id = value['@id'];\n                        const type = value['@type'];\n                        // If @id is missing, don't allow @id to be added if @prefix: true and key not being a valid IRI.\n                        const canAddIdEntry = !('@prefix' in value) || Util_1.Util.isValidIri(key);\n                        if ('@id' in value) {\n                            // Use @id value for expansion\n                            if (id !== undefined && id !== null && typeof id === 'string') {\n                                contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { '@id': context.expandTerm(id, true) });\n                                changed = changed || id !== contextRaw[key]['@id'];\n                            }\n                        }\n                        else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {\n                            // Add an explicit @id value based on the expanded key value\n                            const newId = context.expandTerm(key, true);\n                            if (newId !== key) {\n                                // Don't set @id if expansion failed\n                                contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { '@id': newId });\n                                changed = true;\n                            }\n                        }\n                        if (type && typeof type === 'string' && type !== '@vocab'\n                            && (!value['@container'] || !value['@container']['@type'])\n                            && canAddIdEntry) {\n                            // First check @vocab, then fallback to @base\n                            let expandedType = context.expandTerm(type, true);\n                            if (expandContentTypeToBase && type === expandedType) {\n                                expandedType = context.expandTerm(type, false);\n                            }\n                            if (expandedType !== type) {\n                                changed = true;\n                                contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { '@type': expandedType });\n                            }\n                        }\n                    }\n                    if (!changed) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Normalize the @language entries in the given context to lowercase.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} parseOptions The parsing options.\n     */\n    normalize(context, { processingMode, normalizeLanguageTags }) {\n        // Lowercase language keys in 1.0\n        if (normalizeLanguageTags || processingMode === 1.0) {\n            for (const key of Object.keys(context)) {\n                if (key === '@language' && typeof context[key] === 'string') {\n                    context[key] = context[key].toLowerCase();\n                }\n                else {\n                    const value = context[key];\n                    if (value && typeof value === 'object') {\n                        if (typeof value['@language'] === 'string') {\n                            const lowercase = value['@language'].toLowerCase();\n                            if (lowercase !== value['@language']) {\n                                context[key] = Object.assign(Object.assign({}, value), { '@language': lowercase });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert all @container strings and array values to hash-based values.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     */\n    containersToHash(context) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if (typeof value['@container'] === 'string') {\n                    context[key] = Object.assign(Object.assign({}, value), { '@container': { [value['@container']]: true } });\n                }\n                else if (Array.isArray(value['@container'])) {\n                    const newValue = {};\n                    for (const containerValue of value['@container']) {\n                        newValue[containerValue] = true;\n                    }\n                    context[key] = Object.assign(Object.assign({}, value), { '@container': newValue });\n                }\n            }\n        }\n    }\n    /**\n     * Normalize and apply context-level @protected terms onto each term separately.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {number} processingMode The processing mode.\n     */\n    applyScopedProtected(context, { processingMode }, expandOptions) {\n        if (processingMode && processingMode >= 1.1) {\n            if (context['@protected']) {\n                for (const key of Object.keys(context)) {\n                    if (Util_1.Util.isReservedInternalKeyword(key)) {\n                        continue;\n                    }\n                    if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {\n                        const value = context[key];\n                        if (value && typeof value === 'object') {\n                            if (!('@protected' in context[key])) {\n                                // Mark terms with object values as protected if they don't have an @protected: false annotation\n                                context[key] = Object.assign(Object.assign({}, context[key]), { '@protected': true });\n                            }\n                        }\n                        else {\n                            // Convert string-based term values to object-based values with @protected: true\n                            context[key] = {\n                                '@id': value,\n                                '@protected': true,\n                            };\n                            if (Util_1.Util.isSimpleTermDefinitionPrefix(value, expandOptions)) {\n                                context[key] = Object.assign(Object.assign({}, context[key]), { '@prefix': true });\n                            }\n                        }\n                    }\n                }\n                delete context['@protected'];\n            }\n        }\n    }\n    /**\n     * Check if the given context inheritance does not contain any overrides of protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.\n     * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.\n     * @param {string[]} keys Optional set of keys from the context to validate. If left undefined, all\n     * keys defined in contextAfter will be checked.\n     */\n    validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions, keys) {\n        for (const key of (keys !== null && keys !== void 0 ? keys : Object.keys(contextAfter))) {\n            if (Util_1.Util.isTermProtected(contextBefore, key)) {\n                // The entry in the context before will always be in object-mode\n                // If the new entry is in string-mode, convert it to object-mode\n                // before checking if it is identical.\n                if (typeof contextAfter[key] === 'string') {\n                    contextAfter[key] = { '@id': contextAfter[key], '@protected': true };\n                }\n                else {\n                    // We modify this deliberately,\n                    // as we need it for the value comparison (they must be identical modulo '@protected')),\n                    // and for the fact that this new value will override the first one.\n                    contextAfter[key] = Object.assign(Object.assign({}, contextAfter[key]), { '@protected': true });\n                }\n                // Error if they are not identical\n                if (!Util_1.Util.deepEqual(contextBefore[key], contextAfter[key])) {\n                    throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Validate the entries of the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options The parse options.\n     */\n    validate(context, { processingMode }) {\n        for (const key of Object.keys(context)) {\n            // Ignore reserved internal keywords.\n            if (Util_1.Util.isReservedInternalKeyword(key)) {\n                continue;\n            }\n            // Do not allow empty term\n            if (key === '') {\n                throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n            }\n            const value = context[key];\n            const valueType = typeof value;\n            // First check if the key is a keyword\n            if (Util_1.Util.isPotentialKeyword(key)) {\n                switch (key.substr(1)) {\n                    case 'vocab':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                        }\n                        break;\n                    case 'base':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);\n                        }\n                        break;\n                    case 'language':\n                        if (value !== null) {\n                            ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);\n                        }\n                        break;\n                    case 'version':\n                        if (value !== null && valueType !== 'number') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                        }\n                        break;\n                    case 'direction':\n                        if (value !== null) {\n                            ContextParser.validateDirection(value, true);\n                        }\n                        break;\n                    case 'propagate':\n                        if (processingMode === 1.0) {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                        }\n                        if (value !== null && valueType !== 'boolean') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);\n                        }\n                        break;\n                }\n                // Don't allow keywords to be overridden\n                if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {\n                    throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util\n                        .getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                }\n                continue;\n            }\n            // Otherwise, consider the key a term\n            if (value !== null) {\n                switch (valueType) {\n                    case 'string':\n                        if (Util_1.Util.getPrefix(value, context) === key) {\n                            throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                        }\n                        if (Util_1.Util.isValidIriWeak(key)) {\n                            if (value === '@type') {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                            else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                        }\n                        break;\n                    case 'object':\n                        if (!Util_1.Util.isCompactIri(key) && !('@id' in value)\n                            && (value['@type'] === '@id' ? !context['@base'] : !context['@vocab'])) {\n                            throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                        }\n                        for (const objectKey of Object.keys(value)) {\n                            const objectValue = value[objectKey];\n                            if (!objectValue) {\n                                continue;\n                            }\n                            switch (objectKey) {\n                                case '@id':\n                                    if (Util_1.Util.isValidKeyword(objectValue)\n                                        && objectValue !== '@type' && objectValue !== '@id' && objectValue !== '@graph' && objectValue !== '@nest') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.isValidIriWeak(key)) {\n                                        if (objectValue === '@type') {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                        else if (Util_1.Util.isValidIri(objectValue)\n                                            && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.getPrefix(objectValue, context) === key) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                            .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                                    }\n                                    break;\n                                case '@type':\n                                    if (value['@container'] === '@type' && objectValue !== '@id' && objectValue !== '@vocab') {\n                                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (objectValue !== '@id' && objectValue !== '@vocab'\n                                        && (processingMode === 1.0 || objectValue !== '@json')\n                                        && (processingMode === 1.0 || objectValue !== '@none')\n                                        && (objectValue[0] === '_' || !Util_1.Util.isValidIri(objectValue))) {\n                                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    break;\n                                case '@reverse':\n                                    if (typeof objectValue === 'string' && value['@id'] && value['@id'] !== objectValue) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':\\\n'${objectValue}' and '${value['@id']}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    if ('@nest' in value) {\n                                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    break;\n                                case '@container':\n                                    if (processingMode === 1.0) {\n                                        if (Object.keys(objectValue).length > 1\n                                            || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, \\\nmust be only one of ${Util_1.Util.CONTAINERS_1_0.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    for (const containerValue of Object.keys(objectValue)) {\n                                        if (containerValue === '@list' && value['@reverse']) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                        }\n                                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), \\\nmust be one of ${Util_1.Util.CONTAINERS.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    break;\n                                case '@language':\n                                    ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);\n                                    break;\n                                case '@direction':\n                                    ContextParser.validateDirection(objectValue, true);\n                                    break;\n                                case '@prefix':\n                                    if (objectValue !== null && typeof objectValue !== 'boolean') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);\n                                    }\n                                    if (!('@id' in value) && !Util_1.Util.isValidIri(key)) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@index':\n                                    if (processingMode === 1.0 || !value['@container'] || !value['@container']['@index']) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@nest':\n                                    if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== '@nest') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);\n                                    }\n                            }\n                        }\n                        break;\n                    default:\n                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Apply the @base context entry to the given context under certain circumstances.\n     * @param context A context.\n     * @param options Parsing options.\n     * @param inheritFromParent If the @base value from the parent context can be inherited.\n     * @return The given context.\n     */\n    applyBaseEntry(context, options, inheritFromParent) {\n        // In some special cases, this can be a string, so ignore those.\n        if (typeof context === 'string') {\n            return context;\n        }\n        // Give priority to @base in the parent context\n        if (inheritFromParent && !('@base' in context) && options.parentContext\n            && typeof options.parentContext === 'object' && '@base' in options.parentContext) {\n            context['@base'] = options.parentContext['@base'];\n            if (options.parentContext['@__baseDocument']) {\n                context['@__baseDocument'] = true;\n            }\n        }\n        // Override the base IRI if provided.\n        if (options.baseIRI && !options.external) {\n            if (!('@base' in context)) {\n                // The context base is the document base\n                context['@base'] = options.baseIRI;\n                context['@__baseDocument'] = true;\n            }\n            else if (context['@base'] !== null && typeof context['@base'] === 'string'\n                && !Util_1.Util.isValidIri(context['@base'])) {\n                // The context base is relative to the document base\n                context['@base'] = (0, relative_to_absolute_iri_1.resolve)(context['@base'], options.parentContext && options.parentContext['@base'] || options.baseIRI);\n            }\n        }\n        return context;\n    }\n    /**\n     * Resolve relative context IRIs, or return full IRIs as-is.\n     * @param {string} contextIri A context IRI.\n     * @param {string} baseIRI A base IRI.\n     * @return {string} The normalized context IRI.\n     */\n    normalizeContextIri(contextIri, baseIRI) {\n        if (!Util_1.Util.isValidIri(contextIri)) {\n            try {\n                contextIri = (0, relative_to_absolute_iri_1.resolve)(contextIri, baseIRI);\n            }\n            catch (_a) {\n                throw new Error(`Invalid context IRI: ${contextIri}`);\n            }\n        }\n        // TODO: Temporary workaround for fixing schema.org CORS issues (https://github.com/schemaorg/schemaorg/issues/2578#issuecomment-652324465)\n        if (this.redirectSchemaOrgHttps && contextIri.startsWith('http://schema.org')) {\n            contextIri = 'https://schema.org/';\n        }\n        return contextIri;\n    }\n    /**\n     * Parse scoped contexts in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options Parsing options.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     * @param {string[]} keys Optional set of keys from the context to parseInnerContexts of. If left undefined, all\n     * keys in the context will be iterated over.\n     */\n    async parseInnerContexts(context, options, keys) {\n        for (const key of (keys !== null && keys !== void 0 ? keys : Object.keys(context))) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if ('@context' in value && value['@context'] !== null && !options.ignoreScopedContexts) {\n                    // Simulate a processing based on the parent context to check if there are any (potential errors).\n                    // Honestly, I find it a bit weird to do this here, as the context may be unused,\n                    // and the final effective context may differ based on any other embedded/scoped contexts.\n                    // But hey, it's part of the spec, so we have no choice...\n                    // https://w3c.github.io/json-ld-api/#h-note-10\n                    if (this.validateContext) {\n                        try {\n                            const parentContext = Object.assign(Object.assign({}, context), { [key]: Object.assign({}, context[key]) });\n                            delete parentContext[key]['@context'];\n                            await this.parse(value['@context'], Object.assign(Object.assign({}, options), { external: false, parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));\n                        }\n                        catch (e) {\n                            throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);\n                        }\n                    }\n                    context[key] = Object.assign(Object.assign({}, value), { '@context': (await this.parse(value['@context'], Object.assign(Object.assign({}, options), { external: false, minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context })))\n                            .getContextRaw() });\n                }\n            }\n        }\n        return context;\n    }\n    async parse(context, options = {}, \n    // These options are only for internal use on recursive calls and should not be used by\n    // libraries consuming this function\n    internalOptions = {}) {\n        const { baseIRI, parentContext, external, processingMode = ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing, } = options;\n        const remoteContexts = options.remoteContexts || {};\n        // Avoid remote context overflows\n        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {\n            throw new ErrorCoded_1.ErrorCoded('Detected an overflow in remote context inclusions: ' + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);\n        }\n        if (context === null || context === undefined) {\n            // Don't allow context nullification and there are protected terms\n            if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {\n                throw new ErrorCoded_1.ErrorCoded('Illegal context nullification when terms are protected', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);\n            }\n            // Context that are explicitly set to null are empty.\n            return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));\n        }\n        else if (typeof context === 'string') {\n            const contextIri = this.normalizeContextIri(context, baseIRI);\n            const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n            if (overriddenLoad) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);\n            }\n            const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));\n            this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);\n            return parsedStringContext;\n        }\n        else if (Array.isArray(context)) {\n            // As a performance consideration, first load all external contexts in parallel.\n            const contextIris = [];\n            const contexts = await Promise.all(context.map((subContext, i) => {\n                if (typeof subContext === 'string') {\n                    const contextIri = this.normalizeContextIri(subContext, baseIRI);\n                    contextIris[i] = contextIri;\n                    const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n                    if (overriddenLoad) {\n                        return overriddenLoad;\n                    }\n                    return this.load(contextIri);\n                }\n                else {\n                    return subContext;\n                }\n            }));\n            // Don't apply inheritance logic on minimal processing\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);\n            }\n            const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i) => accContextPromise\n                .then((accContext) => this.parse(contextEntry, Object.assign(Object.assign({}, options), { baseIRI: contextIris[i] || options.baseIRI, external: !!contextIris[i] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i]]: true }) : remoteContexts }), \n            // @ts-expect-error: This third argument causes a type error because we have hidden it from consumers\n            {\n                skipValidation: i < contexts.length - 1,\n            })), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));\n            // Override the base IRI if provided.\n            this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);\n            return reducedContexts;\n        }\n        else if (typeof context === 'object') {\n            if ('@context' in context) {\n                return await this.parse(context['@context'], options);\n            }\n            // Make a deep clone of the given context, to avoid modifying it.\n            context = Object.assign({}, context);\n            // According to the JSON-LD spec, @base must be ignored from external contexts.\n            if (external) {\n                delete context['@base'];\n            }\n            // Override the base IRI if provided.\n            this.applyBaseEntry(context, options, true);\n            // Hashify container entries\n            // Do this before protected term validation as that influences term format\n            this.containersToHash(context);\n            // Don't perform any other modifications if only minimal processing is needed.\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);\n            }\n            // In JSON-LD 1.1, load @import'ed context prior to processing.\n            let importContext = {};\n            if ('@import' in context) {\n                if (processingMode >= 1.1) {\n                    // Only accept string values\n                    if (typeof context['@import'] !== 'string') {\n                        throw new ErrorCoded_1.ErrorCoded('An @import value must be a string, but got ' + typeof context['@import'], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);\n                    }\n                    // Load context\n                    importContext = await this.loadImportContext(this.normalizeContextIri(context['@import'], baseIRI));\n                    delete context['@import'];\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded('Context importing is not supported in JSON-LD 1.0', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                }\n            }\n            this.applyScopedProtected(importContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);\n            const newContext = Object.assign(importContext, context);\n            // Handle terms (before protection checks)\n            this.idifyReverseTerms(newContext);\n            this.normalize(newContext, { processingMode, normalizeLanguageTags });\n            this.applyScopedProtected(newContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);\n            const keys = Object.keys(newContext);\n            const overlappingKeys = [];\n            if (typeof parentContext === 'object') {\n                // Merge different parts of the final context in order\n                for (const key in parentContext) {\n                    if (key in newContext) {\n                        overlappingKeys.push(key);\n                    }\n                    else {\n                        newContext[key] = parentContext[key];\n                    }\n                }\n            }\n            // Parse inner contexts with minimal processing\n            await this.parseInnerContexts(newContext, options, keys);\n            const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);\n            // In JSON-LD 1.1, @vocab can be relative to @vocab in the parent context, or a compact IRI.\n            if ((newContext && newContext['@version'] || ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1\n                && ((context['@vocab'] && typeof context['@vocab'] === 'string') || context['@vocab'] === '')) {\n                if (parentContext && '@vocab' in parentContext && context['@vocab'].indexOf(':') < 0) {\n                    newContext['@vocab'] = parentContext['@vocab'] + context['@vocab'];\n                }\n                else if (Util_1.Util.isCompactIri(context['@vocab']) || context['@vocab'] in newContext) {\n                    // @vocab is a compact IRI or refers exactly to a prefix\n                    newContext['@vocab'] = newContextWrapped.expandTerm(context['@vocab'], true);\n                }\n            }\n            this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase, keys);\n            // In JSON-LD 1.1, check if we are not redefining any protected keywords\n            if (!ignoreProtection && parentContext && processingMode >= 1.1) {\n                this.validateKeywordRedefinitions(parentContext, newContext, JsonLdContextNormalized_1.defaultExpandOptions, overlappingKeys);\n            }\n            if (this.validateContext && !internalOptions.skipValidation) {\n                this.validate(newContext, { processingMode });\n            }\n            return newContextWrapped;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);\n        }\n    }\n    /**\n     * Fetch the given URL as a raw JSON-LD context.\n     * @param url An URL.\n     * @return A promise resolving to a raw JSON-LD context.\n     */\n    async load(url) {\n        // First try to retrieve the context from cache\n        const cached = this.documentCache[url];\n        if (cached) {\n            return cached;\n        }\n        // If not in cache, load it\n        let document;\n        try {\n            document = await this.documentLoader.load(url);\n        }\n        catch (e) {\n            throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);\n        }\n        // Validate the context\n        if (!('@context' in document)) {\n            throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        return this.documentCache[url] = document['@context'];\n    }\n    /**\n     * Override the given context that may be loaded.\n     *\n     * This will check whether or not the url is recursively being loaded.\n     * @param url An URL.\n     * @param options Parsing options.\n     * @return An overridden context, or null.\n     *         Optionally an error can be thrown if a cyclic context is detected.\n     */\n    getOverriddenLoad(url, options) {\n        if (url in (options.remoteContexts || {})) {\n            if (options.ignoreRemoteScopedContexts) {\n                return url;\n            }\n            else {\n                throw new ErrorCoded_1.ErrorCoded('Detected a cyclic context inclusion of ' + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);\n            }\n        }\n        return null;\n    }\n    /**\n     * Load an @import'ed context.\n     * @param importContextIri The full URI of an @import value.\n     */\n    async loadImportContext(importContextIri) {\n        // Load the context - and do a deep clone since we are about to mutate it\n        let importContext = await this.load(importContextIri);\n        // Require the context to be a non-array object\n        if (typeof importContext !== 'object' || Array.isArray(importContext)) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context must be a single object: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        // Error if the context contains another @import\n        if ('@import' in importContext) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context can not import another context: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n        }\n        importContext = Object.assign({}, importContext);\n        // Containers have to be converted into hash values the same way as for the importing context\n        // Otherwise context validation will fail for container values\n        this.containersToHash(importContext);\n        return importContext;\n    }\n}\nContextParser.DEFAULT_PROCESSING_MODE = 1.1;\nexports.ContextParser = ContextParser;\n//# sourceMappingURL=ContextParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERROR_CODES = exports.ErrorCoded = void 0;\n/**\n * An error that has a certain error code.\n *\n * The error code can be any string.\n * All standardized error codes are listed in {@link ERROR_CODES}.\n */\nclass ErrorCoded extends Error {\n    /* istanbul ignore next */\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nexports.ErrorCoded = ErrorCoded;\n/**\n * All standardized JSON-LD error codes.\n * @see https://w3c.github.io/json-ld-api/#dom-jsonlderrorcode\n */\n// tslint:disable:object-literal-sort-keys\nvar ERROR_CODES;\n(function (ERROR_CODES) {\n    ERROR_CODES[\"COLLIDING_KEYWORDS\"] = \"colliding keywords\";\n    ERROR_CODES[\"CONFLICTING_INDEXES\"] = \"conflicting indexes\";\n    ERROR_CODES[\"CYCLIC_IRI_MAPPING\"] = \"cyclic IRI mapping\";\n    ERROR_CODES[\"INVALID_ID_VALUE\"] = \"invalid @id value\";\n    ERROR_CODES[\"INVALID_INDEX_VALUE\"] = \"invalid @index value\";\n    ERROR_CODES[\"INVALID_NEST_VALUE\"] = \"invalid @nest value\";\n    ERROR_CODES[\"INVALID_PREFIX_VALUE\"] = \"invalid @prefix value\";\n    ERROR_CODES[\"INVALID_PROPAGATE_VALUE\"] = \"invalid @propagate value\";\n    ERROR_CODES[\"INVALID_REVERSE_VALUE\"] = \"invalid @reverse value\";\n    ERROR_CODES[\"INVALID_IMPORT_VALUE\"] = \"invalid @import value\";\n    ERROR_CODES[\"INVALID_VERSION_VALUE\"] = \"invalid @version value\";\n    ERROR_CODES[\"INVALID_BASE_IRI\"] = \"invalid base IRI\";\n    ERROR_CODES[\"INVALID_CONTAINER_MAPPING\"] = \"invalid container mapping\";\n    ERROR_CODES[\"INVALID_CONTEXT_ENTRY\"] = \"invalid context entry\";\n    ERROR_CODES[\"INVALID_CONTEXT_NULLIFICATION\"] = \"invalid context nullification\";\n    ERROR_CODES[\"INVALID_DEFAULT_LANGUAGE\"] = \"invalid default language\";\n    ERROR_CODES[\"INVALID_INCLUDED_VALUE\"] = \"invalid @included value\";\n    ERROR_CODES[\"INVALID_IRI_MAPPING\"] = \"invalid IRI mapping\";\n    ERROR_CODES[\"INVALID_JSON_LITERAL\"] = \"invalid JSON literal\";\n    ERROR_CODES[\"INVALID_KEYWORD_ALIAS\"] = \"invalid keyword alias\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAP_VALUE\"] = \"invalid language map value\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAPPING\"] = \"invalid language mapping\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_STRING\"] = \"invalid language-tagged string\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_VALUE\"] = \"invalid language-tagged value\";\n    ERROR_CODES[\"INVALID_LOCAL_CONTEXT\"] = \"invalid local context\";\n    ERROR_CODES[\"INVALID_REMOTE_CONTEXT\"] = \"invalid remote context\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY\"] = \"invalid reverse property\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_MAP\"] = \"invalid reverse property map\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_VALUE\"] = \"invalid reverse property value\";\n    ERROR_CODES[\"INVALID_SCOPED_CONTEXT\"] = \"invalid scoped context\";\n    ERROR_CODES[\"INVALID_SCRIPT_ELEMENT\"] = \"invalid script element\";\n    ERROR_CODES[\"INVALID_SET_OR_LIST_OBJECT\"] = \"invalid set or list object\";\n    ERROR_CODES[\"INVALID_TERM_DEFINITION\"] = \"invalid term definition\";\n    ERROR_CODES[\"INVALID_TYPE_MAPPING\"] = \"invalid type mapping\";\n    ERROR_CODES[\"INVALID_TYPE_VALUE\"] = \"invalid type value\";\n    ERROR_CODES[\"INVALID_TYPED_VALUE\"] = \"invalid typed value\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT\"] = \"invalid value object\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT_VALUE\"] = \"invalid value object value\";\n    ERROR_CODES[\"INVALID_VOCAB_MAPPING\"] = \"invalid vocab mapping\";\n    ERROR_CODES[\"IRI_CONFUSED_WITH_PREFIX\"] = \"IRI confused with prefix\";\n    ERROR_CODES[\"KEYWORD_REDEFINITION\"] = \"keyword redefinition\";\n    ERROR_CODES[\"LOADING_DOCUMENT_FAILED\"] = \"loading document failed\";\n    ERROR_CODES[\"LOADING_REMOTE_CONTEXT_FAILED\"] = \"loading remote context failed\";\n    ERROR_CODES[\"MULTIPLE_CONTEXT_LINK_HEADERS\"] = \"multiple context link headers\";\n    ERROR_CODES[\"PROCESSING_MODE_CONFLICT\"] = \"processing mode conflict\";\n    ERROR_CODES[\"PROTECTED_TERM_REDEFINITION\"] = \"protected term redefinition\";\n    ERROR_CODES[\"CONTEXT_OVERFLOW\"] = \"context overflow\";\n    ERROR_CODES[\"INVALID_BASE_DIRECTION\"] = \"invalid base direction\";\n    ERROR_CODES[\"RECURSIVE_CONTEXT_INCLUSION\"] = \"recursive context inclusion\";\n    ERROR_CODES[\"INVALID_STREAMING_KEY_ORDER\"] = \"invalid streaming key order\";\n    /**\n     * JSON-LD-star\n     */\n    ERROR_CODES[\"INVALID_EMBEDDED_NODE\"] = \"invalid embedded node\";\n    ERROR_CODES[\"INVALID_ANNOTATION\"] = \"invalid annotation\";\n})(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));\n//# sourceMappingURL=ErrorCoded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchDocumentLoader = void 0;\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst http_link_header_1 = require(\"http-link-header\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n/**\n * Loads documents via the fetch API.\n */\nclass FetchDocumentLoader {\n    constructor(fetcher) {\n        this.fetcher = fetcher;\n    }\n    async load(url) {\n        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: 'application/ld+json' }) });\n        if (response.ok && response.headers) {\n            let mediaType = response.headers.get('Content-Type');\n            if (mediaType) {\n                const colonPos = mediaType.indexOf(';');\n                if (colonPos > 0) {\n                    mediaType = mediaType.substr(0, colonPos);\n                }\n            }\n            if (mediaType === 'application/ld+json') {\n                // Return JSON-LD if proper content type was returned\n                return (await response.json());\n            }\n            else {\n                // Check for alternate link for a non-JSON-LD response\n                if (response.headers.has('Link')) {\n                    let alternateUrl;\n                    response.headers.forEach((value, key) => {\n                        if (key === 'link') {\n                            const linkHeader = (0, http_link_header_1.parse)(value);\n                            for (const link of linkHeader.get('type', 'application/ld+json')) {\n                                if (link.rel === 'alternate') {\n                                    if (alternateUrl) {\n                                        throw new Error('Multiple JSON-LD alternate links were found on ' + url);\n                                    }\n                                    alternateUrl = (0, relative_to_absolute_iri_1.resolve)(link.uri, url);\n                                }\n                            }\n                        }\n                    });\n                    if (alternateUrl) {\n                        return this.load(alternateUrl);\n                    }\n                }\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        else {\n            throw new Error(response.statusText || `Status code: ${response.status}`);\n        }\n    }\n}\nexports.FetchDocumentLoader = FetchDocumentLoader;\n//# sourceMappingURL=FetchDocumentLoader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IDocumentLoader.js.map","\"use strict\";\n// tslint:disable:max-line-length\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=JsonLdContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultExpandOptions = exports.JsonLdContextNormalized = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst Util_1 = require(\"./Util\");\n/**\n * A class exposing operations over a normalized JSON-LD context.\n */\nclass JsonLdContextNormalized {\n    constructor(contextRaw) {\n        this.contextRaw = contextRaw;\n    }\n    /**\n     * @return The raw inner context.\n     */\n    getContextRaw() {\n        return this.contextRaw;\n    }\n    /**\n     * Expand the term or prefix of the given term if it has one,\n     * otherwise return the term as-is.\n     *\n     * This will try to expand the IRI as much as possible.\n     *\n     * Iff in vocab-mode, then other references to other terms in the context can be used,\n     * such as to `myTerm`:\n     * ```\n     * {\n     *   \"myTerm\": \"http://example.org/myLongTerm\"\n     * }\n     * ```\n     *\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,\n     *                              otherwise it is considered a regular term that is expanded based on @base.\n     * @param {IExpandOptions} options Options that define the way how expansion must be done.\n     * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.\n     * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).\n     */\n    expandTerm(term, expandVocab, options = exports.defaultExpandOptions) {\n        const contextValue = this.contextRaw[term];\n        // Immediately return if the term was disabled in the context\n        if (contextValue === null || (contextValue && contextValue['@id'] === null)) {\n            return null;\n        }\n        // Check the @id\n        let validIriMapping = true;\n        if (contextValue && expandVocab) {\n            const value = Util_1.Util.getContextValueId(contextValue);\n            if (value && value !== term) {\n                if (typeof value !== 'string' || (!Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value))) {\n                    // Don't mark this mapping as invalid if we have an unknown keyword, but of the correct form.\n                    if (!Util_1.Util.isPotentialKeyword(value)) {\n                        validIriMapping = false;\n                    }\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        // Check if the term is prefixed\n        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);\n        const vocab = this.contextRaw['@vocab'];\n        const vocabRelative = (!!vocab || vocab === '') && vocab.indexOf(':') < 0;\n        const base = this.contextRaw['@base'];\n        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);\n        if (prefix) {\n            const contextPrefixValue = this.contextRaw[prefix];\n            const value = Util_1.Util.getContextValueId(contextPrefixValue);\n            if (value) {\n                if (typeof contextPrefixValue === 'string' || !options.allowPrefixForcing) {\n                    // If we have a simple term definition,\n                    // check the last character of the prefix to determine whether or not it is a prefix.\n                    // Validate that prefix ends with gen-delim character, unless @prefix is true\n                    if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                else {\n                    // If we have an expanded term definition, default to @prefix: false\n                    if (value[0] !== '_' && !potentialKeyword && !contextPrefixValue['@prefix'] && !(term in this.contextRaw)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                return value + term.substr(prefix.length + 1);\n            }\n        }\n        else if (expandVocab && ((vocab || vocab === '') || (options.allowVocabRelativeToBase && (base && vocabRelative)))\n            && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            if (vocabRelative) {\n                if (options.allowVocabRelativeToBase) {\n                    return ((vocab || base) ? (0, relative_to_absolute_iri_1.resolve)(vocab, base) : '') + term;\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                }\n            }\n            else {\n                return vocab + term;\n            }\n        }\n        else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            return (0, relative_to_absolute_iri_1.resolve)(term, base);\n        }\n        // Return the term as-is, unless we discovered an invalid IRI mapping for this term in the context earlier.\n        if (validIriMapping) {\n            return term;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n        }\n    }\n    /**\n     * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.\n     *\n     * This will try to compact the IRI as much as possible.\n     *\n     * @param {string} iri An IRI to compact.\n     * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,\n     *                        otherwise it is considered a regular term that is compacted based on @base.\n     * @return {string} The compacted term or the IRI as-is.\n     */\n    compactIri(iri, vocab) {\n        // Try @vocab compacting\n        if (vocab && this.contextRaw['@vocab'] && iri.startsWith(this.contextRaw['@vocab'])) {\n            return iri.substr(this.contextRaw['@vocab'].length);\n        }\n        // Try @base compacting\n        if (!vocab && this.contextRaw['@base'] && iri.startsWith(this.contextRaw['@base'])) {\n            return iri.substr(this.contextRaw['@base'].length);\n        }\n        // Loop over all terms in the context\n        // This will try to prefix as short as possible.\n        // Once a fully compacted alias is found, return immediately, as we can not go any shorter.\n        const shortestPrefixing = { prefix: '', suffix: iri };\n        for (const key in this.contextRaw) {\n            const value = this.contextRaw[key];\n            if (value && !Util_1.Util.isPotentialKeyword(key)) {\n                const contextIri = Util_1.Util.getContextValueId(value);\n                if (iri.startsWith(contextIri)) {\n                    const suffix = iri.substr(contextIri.length);\n                    if (!suffix) {\n                        if (vocab) {\n                            // Immediately return on compacted alias\n                            return key;\n                        }\n                    }\n                    else if (suffix.length < shortestPrefixing.suffix.length) {\n                        // Overwrite the shortest prefix\n                        shortestPrefixing.prefix = key;\n                        shortestPrefixing.suffix = suffix;\n                    }\n                }\n            }\n        }\n        // Return the shortest prefix\n        if (shortestPrefixing.prefix) {\n            return shortestPrefixing.prefix + ':' + shortestPrefixing.suffix;\n        }\n        return iri;\n    }\n}\nexports.JsonLdContextNormalized = JsonLdContextNormalized;\nexports.defaultExpandOptions = {\n    allowPrefixForcing: true,\n    allowPrefixNonGenDelims: false,\n    allowVocabRelativeToBase: true,\n};\n//# sourceMappingURL=JsonLdContextNormalized.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nclass Util {\n    /**\n     * Check if the given term is a valid compact IRI.\n     * Otherwise, it may be an IRI.\n     * @param {string} term A term.\n     * @return {boolean} If it is a compact IRI.\n     */\n    static isCompactIri(term) {\n        return term.indexOf(':') > 0 && !(term && term[0] === '#');\n    }\n    /**\n     * Get the prefix from the given term.\n     * @see https://json-ld.org/spec/latest/json-ld/#compact-iris\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {string} The prefix or null.\n     */\n    static getPrefix(term, context) {\n        // Do not consider relative IRIs starting with a hash as compact IRIs\n        if (term && term[0] === '#') {\n            return null;\n        }\n        const separatorPos = term.indexOf(':');\n        if (separatorPos >= 0) {\n            // Suffix can not begin with two slashes\n            if (term.length > separatorPos + 1\n                && term.charAt(separatorPos + 1) === '/'\n                && term.charAt(separatorPos + 2) === '/') {\n                return null;\n            }\n            const prefix = term.substr(0, separatorPos);\n            // Prefix can not be an underscore (this is a blank node)\n            if (prefix === '_') {\n                return null;\n            }\n            // Prefix must match a term in the active context\n            if (context[prefix]) {\n                return prefix;\n            }\n        }\n        return null;\n    }\n    /**\n     * From a given context entry value, get the string value, or the @id field.\n     * @param contextValue A value for a term in a context.\n     * @return {string} The id value, or null.\n     */\n    static getContextValueId(contextValue) {\n        if (contextValue === null || typeof contextValue === 'string') {\n            return contextValue;\n        }\n        const id = contextValue['@id'];\n        return id ? id : null;\n    }\n    /**\n     * Check if the given simple term definition (string-based value of a context term)\n     * should be considered a prefix.\n     * @param value A simple term definition value.\n     * @param options Options that define the way how expansion must be done.\n     */\n    static isSimpleTermDefinitionPrefix(value, options) {\n        return !Util.isPotentialKeyword(value)\n            && (options.allowPrefixNonGenDelims || (typeof value === 'string' && (value[0] === '_' || Util.isPrefixIriEndingWithGenDelim(value))));\n    }\n    /**\n     * Check if the given keyword is of the keyword format \"@\"1*ALPHA.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is of the keyword format.\n     */\n    static isPotentialKeyword(keyword) {\n        return typeof keyword === 'string' && Util.KEYWORD_REGEX.test(keyword);\n    }\n    /**\n     * Check if the given prefix ends with a gen-delim character.\n     * @param {string} prefixIri A prefix IRI.\n     * @return {boolean} If the given prefix IRI is valid.\n     */\n    static isPrefixIriEndingWithGenDelim(prefixIri) {\n        return Util.ENDS_WITH_GEN_DELIM.test(prefixIri);\n    }\n    /**\n     * Check if the given context value can be a prefix value.\n     * @param value A context value.\n     * @return {boolean} If it can be a prefix value.\n     */\n    static isPrefixValue(value) {\n        return value && (typeof value === 'string' || (value && typeof value === 'object'));\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return Boolean(iri && Util.IRI_REGEX.test(iri));\n    }\n    /**\n     * Check if the given IRI is valid, this includes the possibility of being a relative IRI.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIriWeak(iri) {\n        return !!iri && iri[0] !== ':' && Util.IRI_REGEX_WEAK.test(iri);\n    }\n    /**\n     * Check if the given keyword is a defined according to the JSON-LD specification.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is valid.\n     */\n    static isValidKeyword(keyword) {\n        return Util.VALID_KEYWORDS[keyword];\n    }\n    /**\n     * Check if the given term is protected in the context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {string} key A context term.\n     * @return {boolean} If the given term has an @protected flag.\n     */\n    static isTermProtected(context, key) {\n        const value = context[key];\n        return !(typeof value === 'string') && value && value['@protected'];\n    }\n    /**\n     * Check if the given context has at least one protected term.\n     * @param context A context.\n     * @return If the context has a protected term.\n     */\n    static hasProtectedTerms(context) {\n        for (const key of Object.keys(context)) {\n            if (Util.isTermProtected(context, key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check if the given key is an internal reserved keyword.\n     * @param key A context key.\n     */\n    static isReservedInternalKeyword(key) {\n        return key.startsWith('@__');\n    }\n    /**\n     * Check if two objects are deepEqual to on another.\n     * @param object1 The first object to test.\n     * @param object2 The second object to test.\n     */\n    static deepEqual(object1, object2) {\n        const objKeys1 = Object.keys(object1);\n        const objKeys2 = Object.keys(object2);\n        if (objKeys1.length !== objKeys2.length)\n            return false;\n        return objKeys1.every((key) => {\n            const value1 = object1[key];\n            const value2 = object2[key];\n            return (value1 === value2) || (value1 !== null &&\n                value2 !== null &&\n                typeof value1 === \"object\" &&\n                typeof value2 === \"object\" &&\n                this.deepEqual(value1, value2));\n        });\n    }\n    ;\n}\n// Regex for valid IRIs\nUtil.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ \"<>{}|\\\\\\[\\]`#]*(#[^#]*)?$/;\n// Weaker regex for valid IRIs, this includes relative IRIs\nUtil.IRI_REGEX_WEAK = /(?::[^:])|\\//;\n// Regex for keyword form\nUtil.KEYWORD_REGEX = /^@[a-z]+$/i;\n// Regex to see if an IRI ends with a gen-delim character (see RFC 3986)\nUtil.ENDS_WITH_GEN_DELIM = /[:/?#\\[\\]@]$/;\n// Regex for language tags\nUtil.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;\n// Regex for base directions\nUtil.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;\n// All known valid JSON-LD keywords\n// @see https://www.w3.org/TR/json-ld11/#keywords\nUtil.VALID_KEYWORDS = {\n    '@annotation': true,\n    '@base': true,\n    '@container': true,\n    '@context': true,\n    '@direction': true,\n    '@graph': true,\n    '@id': true,\n    '@import': true,\n    '@included': true,\n    '@index': true,\n    '@json': true,\n    '@language': true,\n    '@list': true,\n    '@nest': true,\n    '@none': true,\n    '@prefix': true,\n    '@propagate': true,\n    '@protected': true,\n    '@reverse': true,\n    '@set': true,\n    '@type': true,\n    '@value': true,\n    '@version': true,\n    '@vocab': true,\n};\n// Keys in the contexts that will not be expanded based on the base IRI\nUtil.EXPAND_KEYS_BLACKLIST = [\n    '@base',\n    '@vocab',\n    '@language',\n    '@version',\n    '@direction',\n];\n// Keys in the contexts that may not be aliased from\nUtil.ALIAS_DOMAIN_BLACKLIST = [\n    '@container',\n    '@graph',\n    '@id',\n    '@index',\n    '@list',\n    '@nest',\n    '@none',\n    '@prefix',\n    '@reverse',\n    '@set',\n    '@type',\n    '@value',\n    '@version',\n];\n// Keys in the contexts that may not be aliased to\nUtil.ALIAS_RANGE_BLACKLIST = [\n    '@context',\n    '@preserve',\n];\n// All valid @container values\nUtil.CONTAINERS = [\n    '@list',\n    '@set',\n    '@index',\n    '@language',\n    '@graph',\n    '@id',\n    '@type',\n];\n// All valid @container values under processing mode 1.0\nUtil.CONTAINERS_1_0 = [\n    '@list',\n    '@set',\n    '@index',\n];\nexports.Util = Util;\n//# sourceMappingURL=Util.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/JsonLdParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextTree = void 0;\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\nclass ContextTree {\n    constructor() {\n        this.subTrees = {};\n    }\n    getContext(keys) {\n        if (keys.length > 0) {\n            const [head, ...tail] = keys;\n            const subTree = this.subTrees[head];\n            if (subTree) {\n                const subContext = subTree.getContext(tail);\n                if (subContext) {\n                    return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));\n                }\n            }\n        }\n        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;\n    }\n    setContext(keys, context) {\n        if (keys.length === 0) {\n            this.context = context;\n        }\n        else {\n            const [head, ...tail] = keys;\n            let subTree = this.subTrees[head];\n            if (!subTree) {\n                subTree = this.subTrees[head] = new ContextTree();\n            }\n            subTree.setContext(tail, context);\n        }\n    }\n    removeContext(path) {\n        this.setContext(path, null);\n    }\n}\nexports.ContextTree = ContextTree;\n//# sourceMappingURL=ContextTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdParser = void 0;\n// tslint:disable-next-line:no-var-requires\nconst Parser = require('@bergos/jsonparse');\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst readable_stream_1 = require(\"readable-stream\");\nconst EntryHandlerArrayValue_1 = require(\"./entryhandler/EntryHandlerArrayValue\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\nconst EntryHandlerInvalidFallback_1 = require(\"./entryhandler/EntryHandlerInvalidFallback\");\nconst EntryHandlerPredicate_1 = require(\"./entryhandler/EntryHandlerPredicate\");\nconst EntryHandlerKeywordContext_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordContext\");\nconst EntryHandlerKeywordGraph_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordGraph\");\nconst EntryHandlerKeywordId_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordId\");\nconst EntryHandlerKeywordIncluded_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordIncluded\");\nconst EntryHandlerKeywordNest_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordNest\");\nconst EntryHandlerKeywordType_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordType\");\nconst EntryHandlerKeywordUnknownFallback_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordUnknownFallback\");\nconst EntryHandlerKeywordValue_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordValue\");\nconst ParsingContext_1 = require(\"./ParsingContext\");\nconst Util_1 = require(\"./Util\");\nconst http_link_header_1 = require(\"http-link-header\");\nconst EntryHandlerKeywordAnnotation_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordAnnotation\");\n/**\n * A stream transformer that parses JSON-LD (text) streams to an {@link RDF.Stream}.\n */\nclass JsonLdParser extends readable_stream_1.Transform {\n    constructor(options) {\n        super({ readableObjectMode: true });\n        options = options || {};\n        this.options = options;\n        this.parsingContext = new ParsingContext_1.ParsingContext(Object.assign({ parser: this }, options));\n        this.util = new Util_1.Util({ dataFactory: options.dataFactory, parsingContext: this.parsingContext });\n        this.jsonParser = new Parser();\n        this.contextJobs = [];\n        this.typeJobs = [];\n        this.contextAwaitingJobs = [];\n        this.lastDepth = 0;\n        this.lastKeys = [];\n        this.lastOnValueJob = Promise.resolve();\n        this.attachJsonParserListeners();\n        this.on('end', () => {\n            if (typeof this.jsonParser.mode !== 'undefined') {\n                this.emit('error', new Error('Unclosed document'));\n            }\n        });\n    }\n    /**\n     * Construct a JsonLdParser from the given HTTP response.\n     *\n     * This will throw an error if no valid JSON response is received\n     * (application/ld+json, application/json, or something+json).\n     *\n     * For raw JSON responses, exactly one link header pointing to a JSON-LD context is required.\n     *\n     * This method is not responsible for handling redirects.\n     *\n     * @param baseIRI The URI of the received response.\n     * @param mediaType The received content type.\n     * @param headers Optional HTTP headers.\n     * @param options Optional parser options.\n     */\n    static fromHttpResponse(baseIRI, mediaType, headers, options) {\n        let context;\n        let wellKnownMediaTypes = ['application/activity+json'];\n        if (options && options.wellKnownMediaTypes) {\n            wellKnownMediaTypes = options.wellKnownMediaTypes;\n        }\n        // Special cases when receiving something else than the JSON-LD media type or the wellKnownMediaTypes\n        if (mediaType !== 'application/ld+json' && !wellKnownMediaTypes.includes(mediaType)) {\n            // Only accept JSON or JSON extension types\n            if (mediaType !== 'application/json' && !mediaType.endsWith('+json')) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n            // We need exactly one JSON-LD context in the link header\n            if (headers && headers.has('Link')) {\n                headers.forEach((value, key) => {\n                    if (key === 'link') {\n                        const linkHeader = (0, http_link_header_1.parse)(value);\n                        for (const link of linkHeader.get('rel', 'http://www.w3.org/ns/json-ld#context')) {\n                            if (context) {\n                                throw new jsonld_context_parser_1.ErrorCoded('Multiple JSON-LD context link headers were found on ' + baseIRI, jsonld_context_parser_1.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);\n                            }\n                            context = link.uri;\n                        }\n                    }\n                });\n            }\n            if (!context && !(options === null || options === void 0 ? void 0 : options.ignoreMissingContextLinkHeader)) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Missing context link header for media type ${mediaType} on ${baseIRI}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        // Check if the streaming profile is present\n        let streamingProfile;\n        if (headers && headers.has('Content-Type')) {\n            const contentType = headers.get('Content-Type');\n            const match = /; *profile=([^\"]*)/.exec(contentType);\n            if (match && match[1] === 'http://www.w3.org/ns/json-ld#streaming') {\n                streamingProfile = true;\n            }\n        }\n        return new JsonLdParser(Object.assign({ baseIRI,\n            context,\n            streamingProfile }, options ? options : {}));\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        if ('pipe' in stream) {\n            stream.on('error', (error) => parsed.emit('error', error));\n            const parsed = stream.pipe(new JsonLdParser(this.options));\n            return parsed;\n        }\n        else {\n            const output = new readable_stream_1.PassThrough({ readableObjectMode: true });\n            stream.on('error', (error) => parsed.emit('error', error));\n            stream.on('data', (data) => output.push(data));\n            stream.on('end', () => output.push(null));\n            const parsed = output.pipe(new JsonLdParser(this.options));\n            return parsed;\n        }\n    }\n    _transform(chunk, encoding, callback) {\n        this.jsonParser.write(chunk);\n        this.lastOnValueJob\n            .then(() => callback(), (error) => callback(error));\n    }\n    /**\n     * Start a new job for parsing the given value.\n     *\n     * This will let the first valid {@link IEntryHandler} handle the entry.\n     *\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        let flushStacks = true;\n        // When we go up the stack, emit all unidentified values\n        // We need to do this before the new job, because the new job may require determined values from the flushed jobs.\n        if (lastDepthCheck && depth < this.lastDepth) {\n            // Check if we had any RDF lists that need to be terminated with an rdf:nil\n            const listPointer = this.parsingContext.listPointerStack[this.lastDepth];\n            if (listPointer) {\n                // Terminate the list if the had at least one value\n                if (listPointer.value) {\n                    this.push(this.util.dataFactory.quad(listPointer.value, this.util.rdfRest, this.util.rdfNil, this.util.getDefaultGraph()));\n                }\n                // Add the list id to the id stack, so it can be used higher up in the stack\n                listPointer.listId.listHead = true;\n                this.parsingContext.idStack[listPointer.listRootDepth + 1] = [listPointer.listId];\n                this.parsingContext.listPointerStack.splice(this.lastDepth, 1);\n            }\n            // Flush the buffer for lastDepth\n            // If the parent key is a special type of container, postpone flushing until that parent is handled.\n            if (await EntryHandlerContainer_1.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext, this.lastKeys, this.lastDepth)) {\n                this.parsingContext.pendingContainerFlushBuffers\n                    .push({ depth: this.lastDepth, keys: this.lastKeys.slice(0, this.lastKeys.length) });\n                flushStacks = false;\n            }\n            else {\n                await this.flushBuffer(this.lastDepth, this.lastKeys);\n            }\n        }\n        const key = await this.util.unaliasKeyword(keys[depth], keys, depth);\n        const parentKey = await this.util.unaliasKeywordParent(keys, depth);\n        this.parsingContext.emittedStack[depth] = true;\n        let handleKey = true;\n        // Keywords inside @reverse is not allowed apart from @context\n        if (jsonld_context_parser_1.Util.isValidKeyword(key) && parentKey === '@reverse' && key !== '@context') {\n            this.emit('error', new jsonld_context_parser_1.ErrorCoded(`Found the @id '${value}' inside an @reverse property`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));\n        }\n        // Skip further processing if one of the parent nodes are invalid.\n        // We use the validationStack to reuse validation results that were produced before with common key stacks.\n        let inProperty = false;\n        if (this.parsingContext.validationStack.length > 1) {\n            inProperty = this.parsingContext.validationStack[this.parsingContext.validationStack.length - 1].property;\n        }\n        for (let i = Math.max(1, this.parsingContext.validationStack.length - 1); i < keys.length - 1; i++) {\n            const validationResult = this.parsingContext.validationStack[i]\n                || (this.parsingContext.validationStack[i] = await this.validateKey(keys.slice(0, i + 1), i, inProperty));\n            if (!validationResult.valid) {\n                this.parsingContext.emittedStack[depth] = false;\n                handleKey = false;\n                break;\n            }\n            else if (!inProperty && validationResult.property) {\n                inProperty = true;\n            }\n        }\n        // Skip further processing if this node is part of a literal\n        if (await this.util.isLiteral(keys, depth)) {\n            handleKey = false;\n        }\n        // Get handler\n        if (handleKey) {\n            for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n                const testResult = await entryHandler.test(this.parsingContext, this.util, key, keys, depth);\n                if (testResult) {\n                    // Pass processing over to the handler\n                    await entryHandler.handle(this.parsingContext, this.util, key, keys, value, depth, testResult);\n                    // Flag that this depth is processed\n                    if (entryHandler.isStackProcessor()) {\n                        this.parsingContext.processingStack[depth] = true;\n                    }\n                    break;\n                }\n            }\n        }\n        // Validate value indexes on the root.\n        if (depth === 0 && Array.isArray(value)) {\n            await this.util.validateValueIndexes(value);\n        }\n        // When we go up the stack, flush the old stack\n        if (flushStacks && depth < this.lastDepth) {\n            // Reset our stacks\n            this.flushStacks(this.lastDepth);\n        }\n        this.lastDepth = depth;\n        this.lastKeys = keys;\n        // Clear the keyword cache at this depth, and everything underneath.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(depth - 1);\n    }\n    /**\n     * Flush the processing stacks at the given depth.\n     * @param {number} depth A depth.\n     */\n    flushStacks(depth) {\n        this.parsingContext.processingStack.splice(depth, 1);\n        this.parsingContext.processingType.splice(depth, 1);\n        this.parsingContext.emittedStack.splice(depth, 1);\n        this.parsingContext.idStack.splice(depth, 1);\n        this.parsingContext.graphStack.splice(depth + 1, 1);\n        this.parsingContext.graphContainerTermStack.splice(depth, 1);\n        this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        this.parsingContext.validationStack.splice(depth - 1, 2);\n        this.parsingContext.literalStack.splice(depth, this.parsingContext.literalStack.length - depth);\n        this.parsingContext.annotationsBuffer.splice(depth, 1);\n        // TODO: just like the literal stack, splice all other stack until the end as well?\n    }\n    /**\n     * Flush buffers for the given depth.\n     *\n     * This should be called after the last entry at a given depth was processed.\n     *\n     * @param {number} depth A depth.\n     * @param {any[]} keys A stack of keys.\n     * @return {Promise<void>} A promise resolving if flushing is done.\n     */\n    async flushBuffer(depth, keys) {\n        let subjects = this.parsingContext.idStack[depth];\n        const subjectsWasDefined = !!subjects;\n        if (!subjectsWasDefined) {\n            subjects = this.parsingContext.idStack[depth] = [this.util.dataFactory.blankNode()];\n        }\n        // Flush values at this level\n        const valueBuffer = this.parsingContext.unidentifiedValuesBuffer[depth];\n        if (valueBuffer) {\n            for (const subject of subjects) {\n                const depthOffsetGraph = await this.util.getDepthOffsetGraph(depth, keys);\n                const graphs = (this.parsingContext.graphStack[depth] || depthOffsetGraph >= 0)\n                    ? this.parsingContext.idStack[depth - depthOffsetGraph - 1]\n                    : [await this.util.getGraphContainerValue(keys, depth)];\n                if (graphs) {\n                    for (const graph of graphs) {\n                        // Flush values to stream if the graph @id is known\n                        this.parsingContext.emittedStack[depth] = true;\n                        for (const bufferedValue of valueBuffer) {\n                            this.util.emitQuadChecked(depth, subject, bufferedValue.predicate, bufferedValue.object, graph, bufferedValue.reverse, bufferedValue.isEmbedded);\n                        }\n                    }\n                }\n                else {\n                    // Place the values in the graphs buffer if the graph @id is not yet known\n                    const subGraphBuffer = this.parsingContext.getUnidentifiedGraphBufferSafe(depth - await this.util.getDepthOffsetGraph(depth, keys) - 1);\n                    for (const bufferedValue of valueBuffer) {\n                        if (bufferedValue.reverse) {\n                            subGraphBuffer.push({\n                                object: subject,\n                                predicate: bufferedValue.predicate,\n                                subject: bufferedValue.object,\n                                isEmbedded: bufferedValue.isEmbedded,\n                            });\n                        }\n                        else {\n                            subGraphBuffer.push({\n                                object: bufferedValue.object,\n                                predicate: bufferedValue.predicate,\n                                subject,\n                                isEmbedded: bufferedValue.isEmbedded,\n                            });\n                        }\n                    }\n                }\n            }\n            this.parsingContext.unidentifiedValuesBuffer.splice(depth, 1);\n            this.parsingContext.literalStack.splice(depth, 1);\n            this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        }\n        // Flush graphs at this level\n        const graphBuffer = this.parsingContext.unidentifiedGraphsBuffer[depth];\n        if (graphBuffer) {\n            for (const subject of subjects) {\n                // A @graph statement at the root without @id relates to the default graph,\n                // unless there are top-level properties,\n                // others relate to blank nodes.\n                const graph = depth === 1 && subject.termType === 'BlankNode'\n                    && !this.parsingContext.topLevelProperties ? this.util.getDefaultGraph() : subject;\n                this.parsingContext.emittedStack[depth] = true;\n                for (const bufferedValue of graphBuffer) {\n                    this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.subject, bufferedValue.predicate, bufferedValue.object, graph));\n                }\n            }\n            this.parsingContext.unidentifiedGraphsBuffer.splice(depth, 1);\n        }\n        // Push unhandled annotations up the stack as nested annotations\n        const annotationsBuffer = this.parsingContext.annotationsBuffer[depth];\n        if (annotationsBuffer) {\n            // Throw an error if we reach the top, and still have annotations\n            if (annotationsBuffer.length > 0 && depth === 1) {\n                this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Annotations can not be made on top-level nodes`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n            }\n            // Pass the annotations buffer up one level in the stack\n            const annotationsBufferParent = this.parsingContext.getAnnotationsBufferSafe(depth - 1);\n            for (const annotation of annotationsBuffer) {\n                annotationsBufferParent.push(annotation);\n            }\n            delete this.parsingContext.annotationsBuffer[depth];\n        }\n    }\n    /**\n     * Check if at least one {@link IEntryHandler} validates the entry to true.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth A depth.\n     * @param {boolean} inProperty If the current depth is part of a valid property node.\n     * @return {Promise<{ valid: boolean, property: boolean }>} A promise resolving to true or false.\n     */\n    async validateKey(keys, depth, inProperty) {\n        for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n            if (await entryHandler.validate(this.parsingContext, this.util, keys, depth, inProperty)) {\n                return { valid: true, property: inProperty || entryHandler.isPropertyHandler() };\n            }\n        }\n        return { valid: false, property: false };\n    }\n    /**\n     * Attach all required listeners to the JSON parser.\n     *\n     * This should only be called once.\n     */\n    attachJsonParserListeners() {\n        // Listen to json parser events\n        this.jsonParser.onValue = (value) => {\n            const depth = this.jsonParser.stack.length;\n            const keys = (new Array(depth + 1).fill(0)).map((v, i) => {\n                return i === depth ? this.jsonParser.key : this.jsonParser.stack[i].key;\n            });\n            if (!this.isParsingContextInner(depth)) { // Don't parse inner nodes inside @context\n                const valueJobCb = () => this.newOnValueJob(keys, value, depth, true);\n                if (!this.parsingContext.streamingProfile\n                    && !this.parsingContext.contextTree.getContext(keys.slice(0, -1))) {\n                    // If an out-of-order context is allowed,\n                    // we have to buffer everything.\n                    // We store jobs for @context's and @type's separately,\n                    // because at the end, we have to process them first.\n                    // We also handle @type because these *could* introduce a type-scoped context.\n                    if (keys[depth] === '@context') {\n                        let jobs = this.contextJobs[depth];\n                        if (!jobs) {\n                            jobs = this.contextJobs[depth] = [];\n                        }\n                        jobs.push(valueJobCb);\n                    }\n                    else {\n                        this.contextAwaitingJobs.push({ job: valueJobCb, keys, depth });\n                    }\n                }\n                else {\n                    // Make sure that our value jobs are chained synchronously\n                    this.lastOnValueJob = this.lastOnValueJob.then(valueJobCb);\n                }\n                // Execute all buffered jobs on deeper levels\n                if (!this.parsingContext.streamingProfile && depth === 0) {\n                    this.lastOnValueJob = this.lastOnValueJob\n                        .then(() => this.executeBufferedJobs());\n                }\n            }\n        };\n        this.jsonParser.onError = (error) => {\n            this.emit('error', error);\n        };\n    }\n    /**\n     * Check if the parser is currently parsing an element that is part of an @context entry.\n     * @param {number} depth A depth.\n     * @return {boolean} A boolean.\n     */\n    isParsingContextInner(depth) {\n        for (let i = depth; i > 0; i--) {\n            if (this.jsonParser.stack[i - 1].key === '@context') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Execute all buffered jobs.\n     * @return {Promise<void>} A promise resolving if all jobs are finished.\n     */\n    async executeBufferedJobs() {\n        // Handle context jobs\n        for (const jobs of this.contextJobs) {\n            if (jobs) {\n                for (const job of jobs) {\n                    await job();\n                }\n            }\n        }\n        // Clear the keyword cache.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(0);\n        const contextAwaitingJobs = [];\n        for (const job of this.contextAwaitingJobs) {\n            if ((await this.util.unaliasKeyword(job.keys[job.depth], job.keys, job.depth, true)) === '@type'\n                || typeof job.keys[job.depth] === 'number' && (await this.util.unaliasKeyword(job.keys[job.depth - 1], job.keys, job.depth - 1, true)) === '@type') { // Also capture @type with array values\n                // Remove @type from keys, because we want it to apply to parent later on\n                this.typeJobs.push({ job: job.job, keys: job.keys.slice(0, job.keys.length - 1) });\n            }\n            else {\n                contextAwaitingJobs.push(job);\n            }\n        }\n        // Handle non-context jobs\n        for (const job of contextAwaitingJobs) {\n            // Check if we have a type (with possible type-scoped context) that should be handled before.\n            // We check all possible parent nodes for the current job, from root to leaves.\n            if (this.typeJobs.length > 0) {\n                // First collect all applicable type jobs\n                const applicableTypeJobs = [];\n                const applicableTypeJobIds = [];\n                for (let i = 0; i < this.typeJobs.length; i++) {\n                    const typeJob = this.typeJobs[i];\n                    if (Util_1.Util.isPrefixArray(typeJob.keys, job.keys)) {\n                        applicableTypeJobs.push(typeJob);\n                        applicableTypeJobIds.push(i);\n                    }\n                }\n                // Next, sort the jobs from short to long key length (to ensure types higher up in the tree to be handled first)\n                const sortedTypeJobs = applicableTypeJobs.sort((job1, job2) => job1.keys.length - job2.keys.length);\n                // Finally, execute the jobs in order\n                for (const typeJob of sortedTypeJobs) {\n                    await typeJob.job();\n                }\n                // Remove the executed type jobs\n                // Sort first, so we can efficiently splice\n                const sortedApplicableTypeJobIds = applicableTypeJobIds.sort().reverse();\n                for (const jobId of sortedApplicableTypeJobIds) {\n                    this.typeJobs.splice(jobId, 1);\n                }\n            }\n            await job.job();\n        }\n    }\n}\nJsonLdParser.DEFAULT_PROCESSING_MODE = '1.1';\nJsonLdParser.ENTRY_HANDLERS = [\n    new EntryHandlerArrayValue_1.EntryHandlerArrayValue(),\n    new EntryHandlerKeywordContext_1.EntryHandlerKeywordContext(),\n    new EntryHandlerKeywordId_1.EntryHandlerKeywordId(),\n    new EntryHandlerKeywordIncluded_1.EntryHandlerKeywordIncluded(),\n    new EntryHandlerKeywordGraph_1.EntryHandlerKeywordGraph(),\n    new EntryHandlerKeywordNest_1.EntryHandlerKeywordNest(),\n    new EntryHandlerKeywordType_1.EntryHandlerKeywordType(),\n    new EntryHandlerKeywordValue_1.EntryHandlerKeywordValue(),\n    new EntryHandlerKeywordAnnotation_1.EntryHandlerKeywordAnnotation(),\n    new EntryHandlerContainer_1.EntryHandlerContainer(),\n    new EntryHandlerKeywordUnknownFallback_1.EntryHandlerKeywordUnknownFallback(),\n    new EntryHandlerPredicate_1.EntryHandlerPredicate(),\n    new EntryHandlerInvalidFallback_1.EntryHandlerInvalidFallback(),\n];\nexports.JsonLdParser = JsonLdParser;\n//# sourceMappingURL=JsonLdParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParsingContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst ErrorCoded_1 = require(\"jsonld-context-parser/lib/ErrorCoded\");\nconst ContextTree_1 = require(\"./ContextTree\");\nconst JsonLdParser_1 = require(\"./JsonLdParser\");\n/**\n * Data holder for parsing information.\n */\nclass ParsingContext {\n    constructor(options) {\n        // Initialize settings\n        this.contextParser = new jsonld_context_parser_1.ContextParser({ documentLoader: options.documentLoader, skipValidation: options.skipContextValidation });\n        this.streamingProfile = !!options.streamingProfile;\n        this.baseIRI = options.baseIRI;\n        this.produceGeneralizedRdf = !!options.produceGeneralizedRdf;\n        this.allowSubjectList = !!options.allowSubjectList;\n        this.processingMode = options.processingMode || JsonLdParser_1.JsonLdParser.DEFAULT_PROCESSING_MODE;\n        this.strictValues = !!options.strictValues;\n        this.validateValueIndexes = !!options.validateValueIndexes;\n        this.defaultGraph = options.defaultGraph;\n        this.rdfDirection = options.rdfDirection;\n        this.normalizeLanguageTags = options.normalizeLanguageTags;\n        this.streamingProfileAllowOutOfOrderPlainType = options.streamingProfileAllowOutOfOrderPlainType;\n        this.rdfstar = options.rdfstar !== false;\n        this.rdfstarReverseInEmbedded = options.rdfstarReverseInEmbedded;\n        this.topLevelProperties = false;\n        this.activeProcessingMode = parseFloat(this.processingMode);\n        // Initialize stacks\n        this.processingStack = [];\n        this.processingType = [];\n        this.emittedStack = [];\n        this.idStack = [];\n        this.graphStack = [];\n        this.graphContainerTermStack = [];\n        this.listPointerStack = [];\n        this.contextTree = new ContextTree_1.ContextTree();\n        this.literalStack = [];\n        this.validationStack = [];\n        this.unaliasedKeywordCacheStack = [];\n        this.jsonLiteralStack = [];\n        this.unidentifiedValuesBuffer = [];\n        this.unidentifiedGraphsBuffer = [];\n        this.annotationsBuffer = [];\n        this.pendingContainerFlushBuffers = [];\n        this.parser = options.parser;\n        if (options.context) {\n            this.rootContext = this.parseContext(options.context);\n            this.rootContext.then((context) => this.validateContext(context));\n        }\n        else {\n            this.rootContext = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(this.baseIRI ? { '@base': this.baseIRI, '@__baseDocument': true } : {}));\n        }\n    }\n    /**\n     * Parse the given context with the configured options.\n     * @param {JsonLdContext} context A context to parse.\n     * @param {JsonLdContextNormalized} parentContext An optional parent context.\n     * @param {boolean} ignoreProtection If @protected term checks should be ignored.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the parsed context.\n     */\n    async parseContext(context, parentContext, ignoreProtection) {\n        return this.contextParser.parse(context, {\n            baseIRI: this.baseIRI,\n            ignoreProtection,\n            normalizeLanguageTags: this.normalizeLanguageTags,\n            parentContext,\n            processingMode: this.activeProcessingMode,\n        });\n    }\n    /**\n     * Check if the given context is valid.\n     * If not, an error will be thrown.\n     * @param {JsonLdContextNormalized} context A context.\n     */\n    validateContext(context) {\n        const activeVersion = context.getContextRaw()['@version'];\n        if (activeVersion) {\n            if (this.activeProcessingMode && activeVersion > this.activeProcessingMode) {\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD version '${activeVersion}' under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.PROCESSING_MODE_CONFLICT);\n            }\n            else {\n                if (this.activeProcessingMode && activeVersion < this.activeProcessingMode) {\n                    throw new ErrorCoded_1.ErrorCoded(`Invalid JSON-LD version ${activeVersion} under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                }\n                this.activeProcessingMode = activeVersion;\n            }\n        }\n    }\n    /**\n     * Get the context at the given path.\n     * @param {keys} keys The path of keys to get the context at.\n     * @param {number} offset The path offset, defaults to 1.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to a context.\n     */\n    async getContext(keys, offset = 1) {\n        const keysOriginal = keys;\n        // Ignore array keys at the end\n        while (typeof keys[keys.length - 1] === 'number') {\n            keys = keys.slice(0, keys.length - 1);\n        }\n        // Handle offset on keys\n        if (offset) {\n            keys = keys.slice(0, -offset);\n        }\n        // Determine the closest context\n        const contextData = await this.getContextPropagationAware(keys);\n        const context = contextData.context;\n        // Process property-scoped contexts (high-to-low)\n        let contextRaw = context.getContextRaw();\n        for (let i = contextData.depth; i < keysOriginal.length - offset; i++) {\n            const key = keysOriginal[i];\n            const contextKeyEntry = contextRaw[key];\n            if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n                const scopedContext = (await this.parseContext(contextKeyEntry, contextRaw, true)).getContextRaw();\n                const propagate = !(key in scopedContext)\n                    || scopedContext[key]['@context']['@propagate']; // Propagation is true by default\n                if (propagate !== false || i === keysOriginal.length - 1 - offset) {\n                    contextRaw = Object.assign({}, scopedContext);\n                    // Clean up final context\n                    delete contextRaw['@propagate'];\n                    contextRaw[key] = Object.assign({}, contextRaw[key]);\n                    if ('@id' in contextKeyEntry) {\n                        contextRaw[key]['@id'] = contextKeyEntry['@id'];\n                    }\n                    delete contextRaw[key]['@context'];\n                    if (propagate !== false) {\n                        this.contextTree.setContext(keysOriginal.slice(0, i + offset), Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw)));\n                    }\n                }\n            }\n        }\n        return new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw);\n    }\n    /**\n     * Get the context at the given path.\n     * Non-propagating contexts will be skipped,\n     * unless the context at that exact depth is retrieved.\n     *\n     * This ONLY takes into account context propagation logic,\n     * so this should usually not be called directly,\n     * call {@link #getContext} instead.\n     *\n     * @param keys The path of keys to get the context at.\n     * @return {Promise<{ context: JsonLdContextNormalized, depth: number }>} A context and its depth.\n     */\n    async getContextPropagationAware(keys) {\n        const originalDepth = keys.length;\n        let contextData = null;\n        let hasApplicablePropertyScopedContext;\n        do {\n            hasApplicablePropertyScopedContext = false;\n            if (contextData && '@__propagateFallback' in contextData.context.getContextRaw()) {\n                // If a propagation fallback context has been set,\n                // fallback to that context and retry for the same depth.\n                contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized(contextData.context.getContextRaw()['@__propagateFallback']);\n            }\n            else {\n                if (contextData) {\n                    // If we had a previous iteration, jump to the parent of context depth.\n                    // We must do this because once we get here, last context had propagation disabled,\n                    // so we check its first parent instead.\n                    keys = keys.slice(0, contextData.depth - 1);\n                }\n                contextData = await this.contextTree.getContext(keys) || { context: await this.rootContext, depth: 0 };\n            }\n            // Allow non-propagating contexts to propagate one level deeper\n            // if it defines a property-scoped context that is applicable for the current key.\n            // @see https://w3c.github.io/json-ld-api/tests/toRdf-manifest#tc012\n            const lastKey = keys[keys.length - 1];\n            if (lastKey in contextData.context.getContextRaw()) {\n                const lastKeyValue = contextData.context.getContextRaw()[lastKey];\n                if (lastKeyValue && typeof lastKeyValue === 'object' && '@context' in lastKeyValue) {\n                    hasApplicablePropertyScopedContext = true;\n                }\n            }\n        } while (contextData.depth > 0 // Root context has a special case\n            && contextData.context.getContextRaw()['@propagate'] === false // Stop loop if propagation is true\n            && contextData.depth !== originalDepth // Stop loop if requesting exact depth of non-propagating\n            && !hasApplicablePropertyScopedContext);\n        // Special case for root context that does not allow propagation.\n        // Fallback to empty context in that case.\n        if (contextData.depth === 0\n            && contextData.context.getContextRaw()['@propagate'] === false\n            && contextData.depth !== originalDepth) {\n            contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized({});\n        }\n        return contextData;\n    }\n    /**\n     * Start a new job for parsing the given value.\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        await this.parser.newOnValueJob(keys, value, depth, lastDepthCheck);\n    }\n    /**\n     * Flush the pending container flush buffers\n     * @return {boolean} If any pending buffers were flushed.\n     */\n    async handlePendingContainerFlushBuffers() {\n        if (this.pendingContainerFlushBuffers.length > 0) {\n            for (const pendingFlushBuffer of this.pendingContainerFlushBuffers) {\n                await this.parser.flushBuffer(pendingFlushBuffer.depth, pendingFlushBuffer.keys);\n                this.parser.flushStacks(pendingFlushBuffer.depth);\n            }\n            this.pendingContainerFlushBuffers.splice(0, this.pendingContainerFlushBuffers.length);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Emit the given quad into the output stream.\n     * @param {number} depth The depth the quad was generated at.\n     * @param {Quad} quad A quad to emit.\n     */\n    emitQuad(depth, quad) {\n        if (depth === 1) {\n            this.topLevelProperties = true;\n        }\n        this.parser.push(quad);\n    }\n    /**\n     * Emit the given error into the output stream.\n     * @param {Error} error An error to emit.\n     */\n    emitError(error) {\n        this.parser.emit('error', error);\n    }\n    /**\n     * Emit the given context into the output stream under the 'context' event.\n     * @param {JsonLdContext} context A context to emit.\n     */\n    emitContext(context) {\n        this.parser.emit('context', context);\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedValuesBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedValuesBuffer}.\n     */\n    getUnidentifiedValueBufferSafe(depth) {\n        let buffer = this.unidentifiedValuesBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedValuesBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedGraphsBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedGraphsBuffer}.\n     */\n    getUnidentifiedGraphBufferSafe(depth) {\n        let buffer = this.unidentifiedGraphsBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedGraphsBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.annotationsBuffer}.\n     * @param {number} depth A depth.\n     * @return {} An element of {@link ParsingContext.annotationsBuffer}.\n     */\n    getAnnotationsBufferSafe(depth) {\n        let buffer = this.annotationsBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.annotationsBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * @return IExpandOptions The expand options for the active processing mode.\n     */\n    getExpandOptions() {\n        return ParsingContext.EXPAND_OPTIONS[this.activeProcessingMode];\n    }\n    /**\n     * Shift the stack at the given offset to the given depth.\n     *\n     * This will override anything in the stack at `depth`,\n     * and this will remove anything at `depth + depthOffset`\n     *\n     * @param depth The target depth.\n     * @param depthOffset The origin depth, relative to `depth`.\n     */\n    shiftStack(depth, depthOffset) {\n        // Copy the id stack value up one level so that the next job can access the id.\n        const deeperIdStack = this.idStack[depth + depthOffset];\n        if (deeperIdStack) {\n            this.idStack[depth] = deeperIdStack;\n            this.emittedStack[depth] = true;\n            delete this.idStack[depth + depthOffset];\n        }\n        // Shorten key stack\n        if (this.pendingContainerFlushBuffers.length) {\n            for (const buffer of this.pendingContainerFlushBuffers) {\n                if (buffer.depth >= depth + depthOffset) {\n                    buffer.depth -= depthOffset;\n                    buffer.keys.splice(depth, depthOffset);\n                }\n            }\n        }\n        // Splice stacks\n        if (this.unidentifiedValuesBuffer[depth + depthOffset]) {\n            this.unidentifiedValuesBuffer[depth] = this.unidentifiedValuesBuffer[depth + depthOffset];\n            delete this.unidentifiedValuesBuffer[depth + depthOffset];\n        }\n        if (this.annotationsBuffer[depth + depthOffset - 1]) {\n            if (!this.annotationsBuffer[depth - 1]) {\n                this.annotationsBuffer[depth - 1] = [];\n            }\n            this.annotationsBuffer[depth - 1] = [\n                ...this.annotationsBuffer[depth - 1],\n                ...this.annotationsBuffer[depth + depthOffset - 1],\n            ];\n            delete this.annotationsBuffer[depth + depthOffset - 1];\n        }\n        // TODO: also do the same for other stacks\n    }\n}\nParsingContext.EXPAND_OPTIONS = {\n    1.0: {\n        allowPrefixForcing: false,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: false,\n    },\n    1.1: {\n        allowPrefixForcing: true,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: true,\n    },\n};\nexports.ParsingContext = ParsingContext;\n//# sourceMappingURL=ParsingContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Utility functions and methods.\n */\nclass Util {\n    constructor(options) {\n        this.parsingContext = options.parsingContext;\n        this.dataFactory = options.dataFactory || new rdf_data_factory_1.DataFactory();\n        this.rdfFirst = this.dataFactory.namedNode(Util.RDF + 'first');\n        this.rdfRest = this.dataFactory.namedNode(Util.RDF + 'rest');\n        this.rdfNil = this.dataFactory.namedNode(Util.RDF + 'nil');\n        this.rdfType = this.dataFactory.namedNode(Util.RDF + 'type');\n        this.rdfJson = this.dataFactory.namedNode(Util.RDF + 'JSON');\n    }\n    /**\n     * Helper function to get the value of a context entry,\n     * or fallback to a certain value.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} contextKey A pre-defined JSON-LD key in context entries.\n     * @param {string} key A context entry key.\n     * @param {string} fallback A fallback value for when the given contextKey\n     *                          could not be found in the value with the given key.\n     * @return {string} The value of the given contextKey in the entry behind key in the given context,\n     *                  or the given fallback value.\n     */\n    static getContextValue(context, contextKey, key, fallback) {\n        const entry = context.getContextRaw()[key];\n        if (!entry) {\n            return fallback;\n        }\n        const type = entry[contextKey];\n        return type === undefined ? fallback : type;\n    }\n    /**\n     * Get the container type of the given key in the context.\n     *\n     * Should any context-scoping bugs should occur related to this in the future,\n     * it may be required to increase the offset from the depth at which the context is retrieved by one (to 2).\n     * This is because containers act 2 levels deep.\n     *\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The container type.\n     */\n    static getContextValueContainer(context, key) {\n        return Util.getContextValue(context, '@container', key, { '@set': true });\n    }\n    /**\n     * Get the value type of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueType(context, key) {\n        const valueType = Util.getContextValue(context, '@type', key, null);\n        if (valueType === '@none') {\n            return null;\n        }\n        return valueType;\n    }\n    /**\n     * Get the language of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueLanguage(context, key) {\n        return Util.getContextValue(context, '@language', key, context.getContextRaw()['@language'] || null);\n    }\n    /**\n     * Get the direction of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueDirection(context, key) {\n        return Util.getContextValue(context, '@direction', key, context.getContextRaw()['@direction'] || null);\n    }\n    /**\n     * Check if the given key in the context is a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {boolean} If the context value has a @reverse key.\n     */\n    static isContextValueReverse(context, key) {\n        return !!Util.getContextValue(context, '@reverse', key, null);\n    }\n    /**\n     * Get the @index of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The index.\n     */\n    static getContextValueIndex(context, key) {\n        return Util.getContextValue(context, '@index', key, context.getContextRaw()['@index'] || null);\n    }\n    /**\n     * Check if the given key refers to a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The property key.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property must be reversed.\n     */\n    static isPropertyReverse(context, key, parentKey) {\n        // '!==' is needed because reversed properties in a @reverse container should cancel each other out.\n        return parentKey === '@reverse' !== Util.isContextValueReverse(context, key);\n    }\n    /**\n     * Check if the given key exists inside an embedded node as direct child.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property is embedded.\n     */\n    static isPropertyInEmbeddedNode(parentKey) {\n        return parentKey === '@id';\n    }\n    /**\n     * Check if the given key exists inside an annotation object as direct child.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property is an annotation.\n     */\n    static isPropertyInAnnotationObject(parentKey) {\n        return parentKey === '@annotation';\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return iri !== null && jsonld_context_parser_1.Util.isValidIri(iri);\n    }\n    /**\n     * Check if the given first array (needle) is a prefix of the given second array (haystack).\n     * @param needle An array to check if it is a prefix.\n     * @param haystack An array to look in.\n     */\n    static isPrefixArray(needle, haystack) {\n        if (needle.length > haystack.length) {\n            return false;\n        }\n        for (let i = 0; i < needle.length; i++) {\n            if (needle[i] !== haystack[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Make sure that @id-@index pairs are equal over all array values.\n     * Reject otherwise.\n     * @param {any[]} value An array value.\n     * @return {Promise<void>} A promise rejecting if conflicts are present.\n     */\n    async validateValueIndexes(value) {\n        if (this.parsingContext.validateValueIndexes) {\n            const indexHashes = {};\n            for (const entry of value) {\n                if (entry && typeof entry === 'object') {\n                    const id = entry['@id'];\n                    const index = entry['@index'];\n                    if (id && index) {\n                        const existingIndexValue = indexHashes[id];\n                        if (existingIndexValue && existingIndexValue !== index) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Conflicting @index value for ${id}`, jsonld_context_parser_1.ERROR_CODES.CONFLICTING_INDEXES);\n                        }\n                        indexHashes[id] = index;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert a given JSON value to an RDF term.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param value A JSON value.\n     * @param {number} depth The depth the value is at.\n     * @param {string[]} keys The path of keys.\n     * @return {Promise<RDF.Term[]>} An RDF term array.\n     */\n    async valueToTerm(context, key, value, depth, keys) {\n        // Skip further processing if we have an @type: @json\n        if (Util.getContextValueType(context, key) === '@json') {\n            return [this.dataFactory.literal(this.valueToJsonString(value), this.rdfJson)];\n        }\n        const type = typeof value;\n        switch (type) {\n            case 'object':\n                // Skip if we have a null or undefined object\n                if (value === null || value === undefined) {\n                    return [];\n                }\n                // Special case for arrays\n                if (Array.isArray(value)) {\n                    // We handle arrays at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty context-based lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if ('@list' in Util.getContextValueContainer(context, key)) {\n                        if (value.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    await this.validateValueIndexes(value);\n                    return [];\n                }\n                // Handle property-scoped contexts\n                context = await this.getContextSelfOrPropertyScoped(context, key);\n                // Handle local context in the value\n                if ('@context' in value) {\n                    context = await this.parsingContext.parseContext(value['@context'], (await this.parsingContext.getContext(keys, 0)).getContextRaw());\n                }\n                // In all other cases, we have a hash\n                value = await this.unaliasKeywords(value, keys, depth, context); // Un-alias potential keywords in this hash\n                if ('@value' in value) {\n                    let val;\n                    let valueLanguage;\n                    let valueDirection;\n                    let valueType;\n                    let valueIndex; // We don't use the index, but we need to check its type for spec-compliance\n                    for (key in value) {\n                        const subValue = value[key];\n                        switch (key) {\n                            case '@value':\n                                val = subValue;\n                                break;\n                            case '@language':\n                                valueLanguage = subValue;\n                                break;\n                            case '@direction':\n                                valueDirection = subValue;\n                                break;\n                            case '@type':\n                                valueType = subValue;\n                                break;\n                            case '@index':\n                                valueIndex = subValue;\n                                break;\n                            case '@annotation':\n                                // This keyword is allowed, but is processed like normal nodes\n                                break;\n                            default:\n                                throw new jsonld_context_parser_1.ErrorCoded(`Unknown value entry '${key}' in @value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                    }\n                    // Skip further processing if we have an @type: @json\n                    if (await this.unaliasKeyword(valueType, keys, depth, true, context) === '@json') {\n                        return [this.dataFactory.literal(this.valueToJsonString(val), this.rdfJson)];\n                    }\n                    // Validate @value\n                    if (val === null) {\n                        return [];\n                    }\n                    if (typeof val === 'object') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);\n                    }\n                    // Validate @index\n                    if (this.parsingContext.validateValueIndexes && valueIndex && typeof valueIndex !== 'string') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(valueIndex)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE);\n                    }\n                    // Validate @language and @direction\n                    if (valueLanguage) {\n                        if (typeof val !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateLanguage(valueLanguage, this.parsingContext.strictValues, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING)) {\n                            return [];\n                        }\n                        // Language tags are always normalized to lowercase in 1.0.\n                        if (this.parsingContext.normalizeLanguageTags || this.parsingContext.activeProcessingMode === 1.0) {\n                            valueLanguage = valueLanguage.toLowerCase();\n                        }\n                    }\n                    if (valueDirection) {\n                        if (typeof val !== 'string') {\n                            throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateDirection(valueDirection, this.parsingContext.strictValues)) {\n                            return [];\n                        }\n                    }\n                    // Check @language and @direction\n                    if (valueLanguage && valueDirection && this.parsingContext.rdfDirection) {\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON\n                                .stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueLanguage) { // Check @language\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return [this.dataFactory.literal(val, valueLanguage)];\n                    }\n                    else if (valueDirection && this.parsingContext.rdfDirection) { // Check @direction\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueType) { // Validate @type\n                        if (typeof valueType !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        const typeTerm = this.createVocabOrBaseTerm(context, valueType);\n                        if (!typeTerm) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        if (typeTerm.termType !== 'NamedNode') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Illegal value type (${typeTerm.termType}): ${valueType}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        return [this.dataFactory.literal(val, typeTerm)];\n                    }\n                    // We don't pass the context, because context-based things like @language should be ignored\n                    return await this.valueToTerm(new jsonld_context_parser_1.JsonLdContextNormalized({}), key, val, depth, keys);\n                }\n                else if ('@set' in value) {\n                    // No other entries are allow in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    // No need to do anything here, this is handled at the deeper level.\n                    return [];\n                }\n                else if ('@list' in value) {\n                    // No other entries are allowed in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    const listValue = value[\"@list\"];\n                    // We handle lists at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty anonymous lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if (Array.isArray(listValue)) {\n                        if (listValue.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    else {\n                        // We only have a single list element here, so emit this directly as single element\n                        return await this.valueToTerm(await this.parsingContext.getContext(keys), key, listValue, depth - 1, keys.slice(0, -1));\n                    }\n                }\n                else if ('@reverse' in value && typeof value['@reverse'] === 'boolean') {\n                    // We handle reverse properties at value level so we can emit earlier,\n                    // so this is handled already when we get here.\n                    return [];\n                }\n                else if ('@graph' in Util.getContextValueContainer(await this.parsingContext.getContext(keys), key)) {\n                    // We are processing a graph container\n                    const graphContainerEntries = this.parsingContext.graphContainerTermStack[depth + 1];\n                    return graphContainerEntries ? Object.values(graphContainerEntries) : [this.dataFactory.blankNode()];\n                }\n                else if (\"@id\" in value) {\n                    // Use deeper context if the value node contains other properties next to @id.\n                    if (Object.keys(value).length > 1) {\n                        context = await this.parsingContext.getContext(keys, 0);\n                    }\n                    // Handle local context in the value\n                    if ('@context' in value) {\n                        context = await this.parsingContext.parseContext(value['@context'], context.getContextRaw());\n                    }\n                    if (value[\"@type\"] === '@vocab') {\n                        return this.nullableTermToArray(this.createVocabOrBaseTerm(context, value[\"@id\"]));\n                    }\n                    else {\n                        const valueId = value[\"@id\"];\n                        let valueTerm;\n                        if (typeof valueId === 'object') {\n                            if (this.parsingContext.rdfstar) {\n                                valueTerm = this.parsingContext.idStack[depth + 1][0];\n                            }\n                            else {\n                                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE);\n                            }\n                        }\n                        else {\n                            valueTerm = this.resourceToTerm(context, valueId);\n                        }\n                        return this.nullableTermToArray(valueTerm);\n                    }\n                }\n                else {\n                    // Only make a blank node if at least one triple was emitted at the value's level.\n                    if (this.parsingContext.emittedStack[depth + 1]\n                        || (value && typeof value === 'object' && Object.keys(value).length === 0)) {\n                        return (this.parsingContext.idStack[depth + 1]\n                            || (this.parsingContext.idStack[depth + 1] = [this.dataFactory.blankNode()]));\n                    }\n                    else {\n                        return [];\n                    }\n                }\n            case 'string':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, null));\n            case 'boolean':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, Boolean(value).toString(), this.dataFactory.namedNode(Util.XSD_BOOLEAN)));\n            case 'number':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, this.dataFactory.namedNode(value % 1 === 0 && value < 1e21 ? Util.XSD_INTEGER : Util.XSD_DOUBLE)));\n            default:\n                this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${type}`));\n                return [];\n        }\n    }\n    /**\n     * If the context defines a property-scoped context for the given key,\n     * that context will be returned.\n     * Otherwise, the given context will be returned as-is.\n     *\n     * This should be used for valueToTerm cases that are not objects.\n     * @param context A context.\n     * @param key A JSON key.\n     */\n    async getContextSelfOrPropertyScoped(context, key) {\n        const contextKeyEntry = context.getContextRaw()[key];\n        if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n            context = await this.parsingContext.parseContext(contextKeyEntry, context.getContextRaw(), true);\n        }\n        return context;\n    }\n    /**\n     * If the given term is null, return an empty array, otherwise return an array with the single given term.\n     * @param term A term.\n     */\n    nullableTermToArray(term) {\n        return term ? [term] : [];\n    }\n    /**\n     * Convert a given JSON key to an RDF predicate term,\n     * based on @vocab.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node.\n     */\n    predicateToTerm(context, key) {\n        const expanded = context.expandTerm(key, true, this.parsingContext.getExpandOptions());\n        // Immediately return if the predicate was disabled in the context\n        if (!expanded) {\n            return null;\n        }\n        // Check if the predicate is a blank node\n        if (expanded[0] === '_' && expanded[1] === ':') {\n            if (this.parsingContext.produceGeneralizedRdf) {\n                return this.dataFactory.blankNode(expanded.substr(2));\n            }\n            else {\n                return null;\n            }\n        }\n        // Check if the predicate is a valid IRI\n        if (Util.isValidIri(expanded)) {\n            return this.dataFactory.namedNode(expanded);\n        }\n        else {\n            if (expanded && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid predicate IRI: ${expanded}`, jsonld_context_parser_1.ERROR_CODES.INVALID_IRI_MAPPING));\n            }\n            else {\n                return null;\n            }\n        }\n        return null;\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term or blank node,\n     * based on @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    resourceToTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const iri = context.expandTerm(key, false, this.parsingContext.getExpandOptions());\n        if (!Util.isValidIri(iri)) {\n            if (iri && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new Error(`Invalid resource IRI: ${iri}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(iri);\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term.\n     * It will do this based on the @vocab,\n     * and fallback to @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    createVocabOrBaseTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const expandOptions = this.parsingContext.getExpandOptions();\n        let expanded = context.expandTerm(key, true, expandOptions);\n        if (expanded === key) {\n            expanded = context.expandTerm(key, false, expandOptions);\n        }\n        if (!Util.isValidIri(expanded)) {\n            if (expanded && this.parsingContext.strictValues && !expanded.startsWith('@')) {\n                this.parsingContext.emitError(new Error(`Invalid term IRI: ${expanded}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(expanded);\n    }\n    /**\n     * Ensure that the given value becomes a string.\n     * @param {string | number} value A string or number.\n     * @param {NamedNode} datatype The intended datatype.\n     * @return {string} The returned string.\n     */\n    intToString(value, datatype) {\n        if (typeof value === 'number') {\n            if (Number.isFinite(value)) {\n                const isInteger = value % 1 === 0;\n                if (isInteger && (!datatype || datatype.value !== Util.XSD_DOUBLE)) {\n                    return Number(value).toString();\n                }\n                else {\n                    return value.toExponential(15).replace(/(\\d)0*e\\+?/, '$1E');\n                }\n            }\n            else {\n                return value > 0 ? 'INF' : '-INF';\n            }\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Convert a given JSON string value to an RDF term.\n     * @param {number} depth The current stack depth.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param {string} value A JSON value.\n     * @param {NamedNode} defaultDatatype The default datatype for the given value.\n     * @return {RDF.Term} An RDF term or null.\n     */\n    stringValueToTerm(depth, context, key, value, defaultDatatype) {\n        // Check the datatype from the context\n        const contextType = Util.getContextValueType(context, key);\n        if (contextType) {\n            if (contextType === '@id') {\n                if (!defaultDatatype) {\n                    return this.resourceToTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else if (contextType === '@vocab') {\n                if (!defaultDatatype) {\n                    return this.createVocabOrBaseTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else {\n                defaultDatatype = this.dataFactory.namedNode(contextType);\n            }\n        }\n        // If we don't find such a datatype, check the language from the context\n        if (!defaultDatatype) {\n            const contextLanguage = Util.getContextValueLanguage(context, key);\n            const contextDirection = Util.getContextValueDirection(context, key);\n            if (contextDirection && this.parsingContext.rdfDirection) {\n                return this.createLanguageDirectionLiteral(depth, this.intToString(value, defaultDatatype), contextLanguage, contextDirection);\n            }\n            else {\n                return this.dataFactory.literal(this.intToString(value, defaultDatatype), contextLanguage);\n            }\n        }\n        // If all else fails, make a literal based on the default content type\n        return this.dataFactory.literal(this.intToString(value, defaultDatatype), defaultDatatype);\n    }\n    /**\n     * Create a literal for the given value with the given language and direction.\n     * Auxiliary quads may be emitted.\n     * @param {number} depth The current stack depth.\n     * @param {string} value A string value.\n     * @param {string} language A language tag.\n     * @param {string} direction A direction.\n     * @return {Term} An RDF term.\n     */\n    createLanguageDirectionLiteral(depth, value, language, direction) {\n        if (this.parsingContext.rdfDirection === 'i18n-datatype') {\n            // Create a datatyped literal, by encoding the language and direction into https://www.w3.org/ns/i18n#.\n            if (!language) {\n                language = '';\n            }\n            return this.dataFactory.literal(value, this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${language}_${direction}`));\n        }\n        else {\n            // Reify the literal.\n            const valueNode = this.dataFactory.blankNode();\n            const graph = this.getDefaultGraph();\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'value'), this.dataFactory.literal(value), graph));\n            if (language) {\n                this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'language'), this.dataFactory.literal(language), graph));\n            }\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'direction'), this.dataFactory.literal(direction), graph));\n            return valueNode;\n        }\n    }\n    /**\n     * Stringify the given JSON object to a canonical JSON string.\n     * @param value Any valid JSON value.\n     * @return {string} A canonical JSON string.\n     */\n    valueToJsonString(value) {\n        return canonicalizeJson(value);\n    }\n    /**\n     * If the key is not a keyword, try to check if it is an alias for a keyword,\n     * and if so, un-alias it.\n     * @param {string} key A key, can be falsy.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth to\n     * @param {boolean} disableCache If the cache should be disabled\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<string>} A promise resolving to the key itself, or another key.\n     */\n    async unaliasKeyword(key, keys, depth, disableCache, context) {\n        // Numbers can not be an alias\n        if (Number.isInteger(key)) {\n            return key;\n        }\n        // Try to grab from cache if it was already un-aliased before.\n        if (!disableCache) {\n            const cachedUnaliasedKeyword = this.parsingContext.unaliasedKeywordCacheStack[depth];\n            if (cachedUnaliasedKeyword) {\n                return cachedUnaliasedKeyword;\n            }\n        }\n        if (!jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            context = context || await this.parsingContext.getContext(keys);\n            let unliased = context.getContextRaw()[key];\n            if (unliased && typeof unliased === 'object') {\n                unliased = unliased['@id'];\n            }\n            if (jsonld_context_parser_1.Util.isValidKeyword(unliased)) {\n                key = unliased;\n            }\n        }\n        return disableCache ? key : (this.parsingContext.unaliasedKeywordCacheStack[depth] = key);\n    }\n    /**\n     * Unalias the keyword of the parent.\n     * This adds a safety check if no parent exist.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<any>} A promise resolving to the parent key, or another key.\n     */\n    async unaliasKeywordParent(keys, depth) {\n        return await this.unaliasKeyword(depth > 0 && keys[depth - 1], keys, depth - 1);\n    }\n    /**\n     * Un-alias all keywords in the given hash.\n     * @param {{[p: string]: any}} hash A hash object.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth.\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<{[p: string]: any}>} A promise resolving to the new hash.\n     */\n    async unaliasKeywords(hash, keys, depth, context) {\n        const newHash = {};\n        for (const key in hash) {\n            newHash[await this.unaliasKeyword(key, keys, depth + 1, true, context)] = hash[key];\n        }\n        return newHash;\n    }\n    /**\n     * Check if we are processing a literal (including JSON literals) at the given depth.\n     * This will also check higher levels,\n     * because if a parent is a literal,\n     * then the deeper levels are definitely a literal as well.\n     * @param {any[]} keys The keys.\n     * @param {number} depth The depth.\n     * @return {boolean} If we are processing a literal.\n     */\n    async isLiteral(keys, depth) {\n        for (let i = depth; i >= 0; i--) {\n            if (await this.unaliasKeyword(keys[i], keys, i) === '@annotation') {\n                // Literals may have annotations, which require processing of inner nodes.\n                return false;\n            }\n            if (this.parsingContext.literalStack[i] || this.parsingContext.jsonLiteralStack[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check how many parents should be skipped for checking the @graph for the given node.\n     *\n     * @param {number} depth The depth of the node.\n     * @param {any[]} keys An array of keys.\n     * @return {number} The graph depth offset.\n     */\n    async getDepthOffsetGraph(depth, keys) {\n        for (let i = depth - 1; i > 0; i--) {\n            if (await this.unaliasKeyword(keys[i], keys, i) === '@graph') {\n                // Skip further processing if we are already in an @graph-@id or @graph-@index container\n                const containers = (await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys, i)).containers;\n                if (EntryHandlerContainer_1.EntryHandlerContainer.isComplexGraphContainer(containers)) {\n                    return -1;\n                }\n                return depth - i - 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Check if the given subject is of a valid type.\n     * This should be called when applying @reverse'd properties.\n     * @param {Term} subject A subject.\n     */\n    validateReverseSubject(subject) {\n        if (subject.termType === 'Literal') {\n            throw new jsonld_context_parser_1.ErrorCoded(`Found illegal literal in subject position: ${subject.value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n        }\n    }\n    /**\n     * Get the default graph.\n     * @return {Term} An RDF term.\n     */\n    getDefaultGraph() {\n        return this.parsingContext.defaultGraph || this.dataFactory.defaultGraph();\n    }\n    /**\n     * Get the current graph, while taking into account a graph that can be defined via @container: @graph.\n     * If not within a graph container, the default graph will be returned.\n     * @param keys The current keys.\n     * @param depth The current depth.\n     */\n    async getGraphContainerValue(keys, depth) {\n        // Default to default graph\n        let graph = this.getDefaultGraph();\n        // Check if we are in an @container: @graph.\n        const { containers, depth: depthContainer } = await EntryHandlerContainer_1.EntryHandlerContainer\n            .getContainerHandler(this.parsingContext, keys, depth);\n        if ('@graph' in containers) {\n            // Get the graph from the stack.\n            const graphContainerIndex = EntryHandlerContainer_1.EntryHandlerContainer.getContainerGraphIndex(containers, depthContainer, keys);\n            const entry = this.parsingContext.graphContainerTermStack[depthContainer];\n            graph = entry ? entry[graphContainerIndex] : null;\n            // Set the graph in the stack if none has been set yet.\n            if (!graph) {\n                let graphId = null;\n                if ('@id' in containers) {\n                    const keyUnaliased = await this.getContainerKey(keys[depthContainer], keys, depthContainer);\n                    if (keyUnaliased !== null) {\n                        graphId = await this.resourceToTerm(await this.parsingContext.getContext(keys), keyUnaliased);\n                    }\n                }\n                if (!graphId) {\n                    graphId = this.dataFactory.blankNode();\n                }\n                if (!this.parsingContext.graphContainerTermStack[depthContainer]) {\n                    this.parsingContext.graphContainerTermStack[depthContainer] = {};\n                }\n                graph = this.parsingContext.graphContainerTermStack[depthContainer][graphContainerIndex] = graphId;\n            }\n        }\n        return graph;\n    }\n    /**\n     * Get the properties depth for retrieving properties.\n     *\n     * Typically, the properties depth will be identical to the given depth.\n     *\n     * The following exceptions apply:\n     * * When the parent is @reverse, the depth is decremented by one.\n     * * When @nest parents are found, the depth is decremented by the number of @nest parents.\n     * If in combination with the exceptions above an intermediary array is discovered,\n     * the depth is also decremented by this number of arrays.\n     *\n     * @param keys The current key chain.\n     * @param depth The current depth.\n     */\n    async getPropertiesDepth(keys, depth) {\n        let lastValidDepth = depth;\n        for (let i = depth - 1; i > 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                const parentKey = await this.unaliasKeyword(keys[i], keys, i);\n                if (parentKey === '@reverse') {\n                    return i;\n                }\n                else if (parentKey === '@nest') {\n                    lastValidDepth = i;\n                }\n                else {\n                    return lastValidDepth;\n                }\n            }\n        }\n        return lastValidDepth;\n    }\n    /**\n     * Get the key for the current container entry.\n     * @param key A key, can be falsy.\n     * @param keys The key chain.\n     * @param depth The current depth to get the key from.\n     * @return Promise resolving to the key.\n     *         Null will be returned for @none entries, with aliasing taken into account.\n     */\n    async getContainerKey(key, keys, depth) {\n        const keyUnaliased = await this.unaliasKeyword(key, keys, depth);\n        return keyUnaliased === '@none' ? null : keyUnaliased;\n    }\n    /**\n     * Check if no reverse properties are present in embedded nodes.\n     * @param key The current key.\n     * @param reverse If a reverse property is active.\n     * @param isEmbedded If we're in an embedded node.\n     */\n    validateReverseInEmbeddedNode(key, reverse, isEmbedded) {\n        if (isEmbedded && reverse && !this.parsingContext.rdfstarReverseInEmbedded) {\n            throw new jsonld_context_parser_1.ErrorCoded(`Illegal reverse property in embedded node in ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE);\n        }\n    }\n    /**\n     * Emit a quad, with checks.\n     * @param depth The current depth.\n     * @param subject S\n     * @param predicate P\n     * @param object O\n     * @param graph G\n     * @param reverse If a reverse property is active.\n     * @param isEmbedded If we're in an embedded node.\n     */\n    emitQuadChecked(depth, subject, predicate, object, graph, reverse, isEmbedded) {\n        // Create a quad\n        let quad;\n        if (reverse) {\n            this.validateReverseSubject(object);\n            quad = this.dataFactory.quad(object, predicate, subject, graph);\n        }\n        else {\n            quad = this.dataFactory.quad(subject, predicate, object, graph);\n        }\n        // Emit the quad, unless it was created in an embedded node\n        if (isEmbedded) {\n            // Embedded nodes don't inherit the active graph\n            if (quad.graph.termType !== 'DefaultGraph') {\n                quad = this.dataFactory.quad(quad.subject, quad.predicate, quad.object);\n            }\n            // Multiple embedded nodes are not allowed\n            if (this.parsingContext.idStack[depth - 1]) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Illegal multiple properties in an embedded node`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE);\n            }\n            this.parsingContext.idStack[depth - 1] = [quad];\n        }\n        else {\n            this.parsingContext.emitQuad(depth, quad);\n        }\n        // Flush annotations\n        const annotationsBuffer = this.parsingContext.annotationsBuffer[depth];\n        if (annotationsBuffer) {\n            for (const annotation of annotationsBuffer) {\n                this.emitAnnotation(depth, quad, annotation);\n            }\n            delete this.parsingContext.annotationsBuffer[depth];\n        }\n    }\n    // This is a separate function to enable recursion\n    emitAnnotation(depth, quad, annotation) {\n        // Construct annotation quad\n        let annotationQuad;\n        if (annotation.reverse) {\n            this.validateReverseSubject(annotation.object);\n            annotationQuad = this.dataFactory.quad(annotation.object, annotation.predicate, quad);\n        }\n        else {\n            annotationQuad = this.dataFactory.quad(quad, annotation.predicate, annotation.object);\n        }\n        // Emit annotated quad\n        this.parsingContext.emitQuad(depth, annotationQuad);\n        // Also emit nested annotations\n        for (const nestedAnnotation of annotation.nestedAnnotations) {\n            this.emitAnnotation(depth, annotationQuad, nestedAnnotation);\n        }\n    }\n}\nUtil.XSD = 'http://www.w3.org/2001/XMLSchema#';\nUtil.XSD_BOOLEAN = Util.XSD + 'boolean';\nUtil.XSD_INTEGER = Util.XSD + 'integer';\nUtil.XSD_DOUBLE = Util.XSD + 'double';\nUtil.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nexports.Util = Util;\n//# sourceMappingURL=Util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIdentifier = void 0;\n/**\n * Container handler for @id.\n *\n * It assumes that the current key is the identifier of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerIdentifier {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        let id;\n        // First check if the child node already has a defined id.\n        if (parsingContext.emittedStack[depth + 1] && parsingContext.idStack[depth + 1]) {\n            // Use the existing identifier\n            id = parsingContext.idStack[depth + 1][0];\n        }\n        else {\n            // Create the identifier\n            const keyUnaliased = await util.getContainerKey(keys[depth], keys, depth);\n            const maybeId = keyUnaliased !== null\n                ? await util.resourceToTerm(await parsingContext.getContext(keys), keys[depth])\n                : util.dataFactory.blankNode();\n            // Do nothing if the id is invalid\n            if (!maybeId) {\n                parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n                return;\n            }\n            id = maybeId;\n            // Insert the id into the stack so that buffered children can make us of it.\n            parsingContext.idStack[depth + 1] = [id];\n        }\n        // Insert the id into the stack so that parents can make use of it.\n        // Insert it as an array because multiple id container entries may exist\n        let ids = parsingContext.idStack[depth];\n        if (!ids) {\n            ids = parsingContext.idStack[depth] = [];\n        }\n        // Only insert the term if it does not exist yet in the array.\n        if (!ids.some((term) => term.equals(id))) {\n            ids.push(id);\n        }\n        // Flush any pending flush buffers\n        if (!await parsingContext.handlePendingContainerFlushBuffers()) {\n            parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n        }\n    }\n}\nexports.ContainerHandlerIdentifier = ContainerHandlerIdentifier;\n//# sourceMappingURL=ContainerHandlerIdentifier.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIndex = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @index.\n *\n * This will ignore the current key and add this entry to the parent node.\n */\nclass ContainerHandlerIndex {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            const graphContainer = '@graph' in containers;\n            // Check if the container is a property-based container by checking if there is a valid @index.\n            const context = await parsingContext.getContext(keys);\n            const indexKey = keys[depth - 1];\n            const indexPropertyRaw = Util_1.Util.getContextValueIndex(context, indexKey);\n            if (indexPropertyRaw) {\n                // Validate the @index value\n                if (jsonld_context_parser_1.Util.isPotentialKeyword(indexPropertyRaw)) {\n                    throw new jsonld_context_parser_1.ErrorCoded(`Keywords can not be used as @index value, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                if (typeof indexPropertyRaw !== 'string') {\n                    throw new jsonld_context_parser_1.ErrorCoded(`@index values must be strings, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // When @index is used, values must be node values, unless @type: @id is defined in the context\n                if (typeof value !== 'object') {\n                    // Error if we don't have @type: @id\n                    if (Util_1.Util.getContextValueType(context, indexKey) !== '@id') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                    }\n                    // Add an @id to the stack, so our expanded @index value can make use of it\n                    const id = util.resourceToTerm(context, value);\n                    if (id) {\n                        parsingContext.idStack[depth + 1] = [id];\n                    }\n                }\n                // Expand the @index value\n                const indexProperty = util.createVocabOrBaseTerm(context, indexPropertyRaw);\n                if (indexProperty) {\n                    const indexValues = await util.valueToTerm(context, indexPropertyRaw, await util.getContainerKey(keys[depth], keys, depth), depth, keys);\n                    if (graphContainer) {\n                        // When we're in a graph container, attach the index to the graph identifier\n                        const graphId = await util.getGraphContainerValue(keys, depth + 1);\n                        for (const indexValue of indexValues) {\n                            parsingContext.emitQuad(depth, util.dataFactory.quad(graphId, indexProperty, indexValue, util.getDefaultGraph()));\n                        }\n                    }\n                    else {\n                        // Otherwise, attach the index to the node identifier\n                        for (const indexValue of indexValues) {\n                            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, indexProperty, indexValue, false, false, false);\n                        }\n                    }\n                }\n            }\n            const depthOffset = graphContainer ? 2 : 1;\n            await parsingContext.newOnValueJob(keys.slice(0, keys.length - depthOffset), value, depth - depthOffset, true);\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerIndex = ContainerHandlerIndex;\n//# sourceMappingURL=ContainerHandlerIndex.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerLanguage = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Container handler for @language.\n *\n * It assumes that the current key is the language of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerLanguage {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        const language = await util.getContainerKey(keys[depth], keys, depth);\n        if (Array.isArray(value)) {\n            // No type-checking needed, will be handled on each value when this handler is called recursively.\n            value = value.map((subValue) => ({ '@value': subValue, '@language': language }));\n        }\n        else {\n            if (typeof value !== 'string') {\n                throw new jsonld_context_parser_1.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(value)}', but expected string`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);\n            }\n            value = { '@value': value, '@language': language };\n        }\n        await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerLanguage = ContainerHandlerLanguage;\n//# sourceMappingURL=ContainerHandlerLanguage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerType = void 0;\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @type.\n *\n * This will add this entry to the parent node, and use the current key as an rdf:type value.\n */\nclass ContainerHandlerType {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            if (typeof value === 'string') {\n                // Determine the @type of the container\n                const context = await parsingContext.getContext(keys);\n                const containerTypeType = Util_1.Util.getContextValueType(context, keys[depth - 1]);\n                // String values refer to node references\n                const id = containerTypeType === '@vocab'\n                    ? await util.createVocabOrBaseTerm(context, value)\n                    : await util.resourceToTerm(context, value);\n                if (id) {\n                    // Handle the value of this node as @id, which will also cause the predicate from above to be emitted.\n                    const subValue = { '@id': id.termType === 'NamedNode' ? id.value : value };\n                    await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), subValue, depth - 1, true);\n                    // Set the id in the stack so it can be used for the rdf:type handling later on\n                    parsingContext.idStack[depth + 1] = [id];\n                }\n            }\n            else {\n                // Other values are handled by handling them as a proper job\n                // Check needed for cases where entries don't have an explicit @id\n                const entryHasIdentifier = !!parsingContext.idStack[depth + 1];\n                // Handle the value of this node, which will also cause the predicate from above to be emitted.\n                if (!entryHasIdentifier) {\n                    delete parsingContext.idStack[depth]; // Force new (blank node) identifier\n                }\n                await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n                if (!entryHasIdentifier) {\n                    parsingContext.idStack[depth + 1] = parsingContext.idStack[depth]; // Copy the id to the child node, for @type\n                }\n            }\n            // Identify the type to emit.\n            const keyOriginal = await util.getContainerKey(keys[depth], keys, depth);\n            const type = keyOriginal !== null\n                ? util.createVocabOrBaseTerm(await parsingContext.getContext(keys), keyOriginal)\n                : null;\n            if (type) {\n                // Push the type to the stack using the rdf:type predicate\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, util.rdfType, type, false, false, false);\n            }\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n    }\n}\nexports.ContainerHandlerType = ContainerHandlerType;\n//# sourceMappingURL=ContainerHandlerType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerArrayValue = void 0;\nconst Util_1 = require(\"../Util\");\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Handles values that are part of an array.\n */\nclass EntryHandlerArrayValue {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return typeof keys[depth] === 'number';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        let parentKey = await util.unaliasKeywordParent(keys, depth);\n        // Check if we have an anonymous list\n        if (parentKey === '@list') {\n            // Our value is part of an array\n            // Determine the list root key\n            let listRootKey = null;\n            let listRootDepth = 0;\n            for (let i = depth - 2; i > 0; i--) {\n                const keyOption = keys[i];\n                if (typeof keyOption === 'string' || typeof keyOption === 'number') {\n                    listRootDepth = i;\n                    listRootKey = keyOption;\n                    break;\n                }\n            }\n            if (listRootKey !== null) {\n                // Emit the given objects as list elements\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), listRootKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n            }\n        }\n        else if (parentKey === '@set') {\n            // Our value is part of a set, so we just add it to the parent-parent\n            await parsingContext.newOnValueJob(keys.slice(0, -2), value, depth - 2, false);\n        }\n        else if (parentKey !== undefined && parentKey !== '@type') {\n            // Buffer our value using the parent key as predicate\n            // Determine the first parent key that is *not* an array key\n            // This is needed in case we have an @list container with nested arrays,\n            // where each of them should produce nested RDF lists.\n            for (let i = depth - 1; i > 0; i--) {\n                if (typeof keys[i] !== 'number') {\n                    parentKey = await util.unaliasKeyword(keys[i], keys, i);\n                    break;\n                }\n            }\n            // Check if the predicate is marked as an @list in the context\n            const parentContext = await parsingContext.getContext(keys.slice(0, -1));\n            if ('@list' in Util_1.Util.getContextValueContainer(parentContext, parentKey)) {\n                // Our value is part of an array\n                // Emit the given objects as list elements\n                parsingContext.emittedStack[depth + 1] = true; // Ensure the creation of bnodes for empty nodes\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), parentKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, -1), depth - 1);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, -1), depth - 1);\n                }\n            }\n            else {\n                // Copy the stack values up one level so that the next job can access them.\n                parsingContext.shiftStack(depth, 1);\n                // Execute the job one level higher\n                await parsingContext.newOnValueJob(keys.slice(0, -1), value, depth - 1, false);\n                // Remove any defined contexts at this level to avoid it to propagate to the next array element.\n                parsingContext.contextTree.removeContext(keys.slice(0, -1));\n            }\n        }\n    }\n    async handleListElement(parsingContext, util, value, valueOriginal, depth, listRootKeys, listRootDepth) {\n        // Buffer our value as an RDF list using the listRootKey as predicate\n        let listPointer = parsingContext.listPointerStack[depth];\n        if (valueOriginal !== null && (await util.unaliasKeywords(valueOriginal, listRootKeys, depth))['@value'] !== null) {\n            if (!listPointer || !listPointer.value) {\n                const linkTerm = util.dataFactory.blankNode();\n                listPointer = { value: linkTerm, listRootDepth, listId: linkTerm };\n            }\n            else {\n                // rdf:rest links are always emitted before the next element,\n                // as the blank node identifier is only created at that point.\n                // Because of this reason, the final rdf:nil is emitted when the stack depth is decreased.\n                const newLinkTerm = util.dataFactory.blankNode();\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfRest, newLinkTerm, util.getDefaultGraph()));\n                // Update the list pointer for the next element\n                listPointer.value = newLinkTerm;\n            }\n            // Emit a list element for the current value\n            // Omit rdf:first if the value is invalid\n            if (value) {\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfFirst, value, util.getDefaultGraph()));\n            }\n        }\n        else {\n            // A falsy list element if found.\n            // Mark it as an rdf:nil list until another valid list element comes in\n            if (!listPointer) {\n                listPointer = { listRootDepth, listId: util.rdfNil };\n            }\n        }\n        parsingContext.listPointerStack[depth] = listPointer;\n        // Error if an annotation was defined\n        if (parsingContext.rdfstar && parsingContext.annotationsBuffer[depth]) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal annotation inside a list`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n        }\n    }\n}\nexports.EntryHandlerArrayValue = EntryHandlerArrayValue;\n//# sourceMappingURL=EntryHandlerArrayValue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerContainer = void 0;\nconst ContainerHandlerIdentifier_1 = require(\"../containerhandler/ContainerHandlerIdentifier\");\nconst ContainerHandlerIndex_1 = require(\"../containerhandler/ContainerHandlerIndex\");\nconst ContainerHandlerLanguage_1 = require(\"../containerhandler/ContainerHandlerLanguage\");\nconst ContainerHandlerType_1 = require(\"../containerhandler/ContainerHandlerType\");\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of a container type (like @index),\n * as specified by {@link IContainerHandler}.\n */\nclass EntryHandlerContainer {\n    /**\n     * Check fit the given container is a simple @graph container.\n     * Concretely, it will check if no @index or @id is active as well.\n     * @param containers A container hash.\n     */\n    static isSimpleGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length === 2) || Object.keys(containers).length === 1);\n    }\n    /**\n     * Check fit the given container is a complex @graph container.\n     * Concretely, it will check if @index or @id is active as well next to @graph.\n     * @param containers A container hash.\n     */\n    static isComplexGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length > 2)\n                || (!('@set' in containers) && Object.keys(containers).length > 1));\n    }\n    /**\n     * Create an graph container index that can be used for identifying a graph term inside the graphContainerTermStack.\n     * @param containers The applicable containers.\n     * @param depth The container depth.\n     * @param keys The array of keys.\n     * @return The graph index.\n     */\n    static getContainerGraphIndex(containers, depth, keys) {\n        let isSimpleGraphContainer = EntryHandlerContainer.isSimpleGraphContainer(containers);\n        let index = '';\n        for (let i = depth; i < keys.length; i++) {\n            if (!isSimpleGraphContainer || typeof keys[i] === 'number') {\n                index += ':' + keys[i];\n            }\n            // Only allow a second 'real' key if in a non-simple graph container.\n            if (!isSimpleGraphContainer && typeof keys[i] !== 'number') {\n                isSimpleGraphContainer = true;\n            }\n        }\n        return index;\n    }\n    /**\n     * Return the applicable container type at the given depth.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<{ containers: {[typeName: string]: boolean}, depth: number, fallback: boolean }>}\n     *          All applicable containers for the given depth,\n     *          the `depth` of the container root (can change when arrays are in the key chain),\n     *          and the `fallback` flag that indicates if the default container type was returned\n     *            (i.e., no dedicated container type is defined).\n     */\n    static async getContainerHandler(parsingContext, keys, depth) {\n        const fallback = {\n            containers: { '@set': true },\n            depth,\n            fallback: true,\n        };\n        // A flag that is enabled when @graph container should be tested in next iteration\n        let checkGraphContainer = false;\n        // Iterate from deeper to higher\n        const context = await parsingContext.getContext(keys, 2);\n        for (let i = depth - 1; i >= 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                // @graph containers without any other types are one level less deep, and require special handling\n                const containersSelf = Util_1.Util.getContextValue(context, '@container', keys[i], false);\n                if (containersSelf && EntryHandlerContainer.isSimpleGraphContainer(containersSelf)) {\n                    return {\n                        containers: containersSelf,\n                        depth: i + 1,\n                        fallback: false,\n                    };\n                }\n                const containersParent = Util_1.Util.getContextValue(context, '@container', keys[i - 1], false);\n                if (!containersParent) { // If we have the fallback container value\n                    if (checkGraphContainer) {\n                        // Return false if we were already expecting a @graph-@id of @graph-@index container\n                        return fallback;\n                    }\n                    // Check parent-parent, we may be in a @graph-@id of @graph-@index container, which have two levels\n                    checkGraphContainer = true;\n                }\n                else {\n                    // We had an invalid container next iteration, so we now have to check if we were in an @graph container\n                    const graphContainer = '@graph' in containersParent;\n                    // We're in a regular container\n                    for (const containerHandleName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n                        if (containersParent[containerHandleName]) {\n                            if (graphContainer) {\n                                // Only accept graph containers if their combined handlers can handle them.\n                                if (EntryHandlerContainer.CONTAINER_HANDLERS[containerHandleName].canCombineWithGraph()) {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                                else {\n                                    return fallback;\n                                }\n                            }\n                            else {\n                                // Only accept if we were not expecting a @graph-@id of @graph-@index container\n                                if (checkGraphContainer) {\n                                    return fallback;\n                                }\n                                else {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                            }\n                        }\n                    }\n                    // Fail if no valid container handlers were found\n                    return fallback;\n                }\n            }\n        }\n        return fallback;\n    }\n    /**\n     * Check if we are handling a value at the given depth\n     * that is part of something that should be handled as a container,\n     * AND if this container should be buffered, so that it can be handled by a dedicated container handler.\n     *\n     * For instance, any container with @graph will NOT be buffered.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<boolean>} If we are in the scope of a container handler.\n     */\n    static async isBufferableContainerHandler(parsingContext, keys, depth) {\n        const handler = await EntryHandlerContainer.getContainerHandler(parsingContext, keys, depth);\n        return !handler.fallback && !('@graph' in handler.containers);\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return !!await this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        const containers = Util_1.Util.getContextValueContainer(await parsingContext.getContext(keys, 2), keys[depth - 1]);\n        for (const containerName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n            if (containers[containerName]) {\n                return {\n                    containers,\n                    handler: EntryHandlerContainer.CONTAINER_HANDLERS[containerName],\n                };\n            }\n        }\n        return null;\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        return testResult.handler.handle(testResult.containers, parsingContext, util, keys, value, depth);\n    }\n}\nEntryHandlerContainer.CONTAINER_HANDLERS = {\n    '@id': new ContainerHandlerIdentifier_1.ContainerHandlerIdentifier(),\n    '@index': new ContainerHandlerIndex_1.ContainerHandlerIndex(),\n    '@language': new ContainerHandlerLanguage_1.ContainerHandlerLanguage(),\n    '@type': new ContainerHandlerType_1.ContainerHandlerType(),\n};\nexports.EntryHandlerContainer = EntryHandlerContainer;\n//# sourceMappingURL=EntryHandlerContainer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerInvalidFallback = void 0;\n/**\n * A catch-all for properties, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerInvalidFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return true;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerInvalidFallback = EntryHandlerInvalidFallback;\n//# sourceMappingURL=EntryHandlerInvalidFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerPredicate = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../Util\");\n/**\n * Interprets keys as predicates.\n * The most common case in JSON-LD processing.\n */\nclass EntryHandlerPredicate {\n    /**\n     * Handle the given predicate-object by either emitting it,\n     * or by placing it in the appropriate stack for later emission when no @graph and/or @id has been defined.\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {Util} util A utility instance.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @param {Term} predicate The predicate.\n     * @param {Term} object The object.\n     * @param {boolean} reverse If the property is reversed.\n     * @param {boolean} isEmbedded If the property exists in an embedded node as direct child.\n     * @param {boolean} isAnnotation If the property exists in an annotation object.\n     * @return {Promise<void>} A promise resolving when handling is done.\n     */\n    static async handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse, isEmbedded, isAnnotation) {\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        const depthOffsetGraph = await util.getDepthOffsetGraph(depth, keys);\n        const depthPropertiesGraph = depth - depthOffsetGraph;\n        const subjects = parsingContext.idStack[depthProperties];\n        if (subjects && !isAnnotation) {\n            // Emit directly if the @id was already defined\n            for (const subject of subjects) {\n                // Check if we're in a @graph context\n                const atGraph = depthOffsetGraph >= 0;\n                if (atGraph) {\n                    const graphs = parsingContext.idStack[depthPropertiesGraph - 1];\n                    if (graphs) {\n                        for (const graph of graphs) {\n                            // Emit our quad if graph @id is known\n                            util.emitQuadChecked(depth, subject, predicate, object, graph, reverse, isEmbedded);\n                        }\n                    }\n                    else {\n                        // Buffer our triple if graph @id is not known yet.\n                        if (reverse) {\n                            util.validateReverseSubject(object);\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject: object, predicate, object: subject, isEmbedded });\n                        }\n                        else {\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1)\n                                .push({ subject, predicate, object, isEmbedded });\n                        }\n                    }\n                }\n                else {\n                    // Emit if no @graph was applicable\n                    const graph = await util.getGraphContainerValue(keys, depthProperties);\n                    util.emitQuadChecked(depth, subject, predicate, object, graph, reverse, isEmbedded);\n                }\n            }\n        }\n        else {\n            // Buffer until our @id becomes known, or we go up the stack\n            if (reverse) {\n                util.validateReverseSubject(object);\n            }\n            // Either push to the annotations or the actual value buffer\n            if (isAnnotation) {\n                // Only add to buffer if rdfstar is enabled\n                if (parsingContext.rdfstar) {\n                    // Error if an @id was defined\n                    if (parsingContext.idStack[depth]) {\n                        parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @id inside an annotation: ${parsingContext.idStack[depth][0].value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n                    }\n                    // Error if we're in an embedded node\n                    for (let i = 0; i < depth; i++) {\n                        if (await util.unaliasKeyword(keys[i], keys, i) === '@id') {\n                            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal annotation inside an embedded node`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n                        }\n                    }\n                    // Store new annotation in the buffer\n                    const annotationsBuffer = parsingContext.getAnnotationsBufferSafe(depthProperties);\n                    const newAnnotation = { predicate, object, reverse, nestedAnnotations: [], depth: depthProperties };\n                    annotationsBuffer.push(newAnnotation);\n                    // Check in the buffer if any annotations were defined at a deeper depth,\n                    // if so, they are considered nested annotations.\n                    for (let i = annotationsBuffer.length - 2; i >= 0; i--) {\n                        // We iterate in reverse order, to enable easy item removal from the back.\n                        const existingAnnotation = annotationsBuffer[i];\n                        if (existingAnnotation.depth > depthProperties) {\n                            newAnnotation.nestedAnnotations.push(existingAnnotation);\n                            annotationsBuffer.splice(i, 1);\n                        }\n                    }\n                }\n            }\n            else {\n                parsingContext.getUnidentifiedValueBufferSafe(depthProperties).push({ predicate, object, reverse, isEmbedded });\n            }\n        }\n    }\n    isPropertyHandler() {\n        return true;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = keys[depth];\n        if (key) {\n            const context = await parsingContext.getContext(keys);\n            if (!parsingContext.jsonLiteralStack[depth] && await util.predicateToTerm(context, keys[depth])) {\n                // If this valid predicate is of type @json, mark it so in the stack so that no deeper handling of nodes occurs.\n                if (Util_1.Util.getContextValueType(context, key) === '@json') {\n                    parsingContext.jsonLiteralStack[depth + 1] = true;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return keys[depth];\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        const keyOriginal = keys[depth];\n        const context = await parsingContext.getContext(keys);\n        const predicate = await util.predicateToTerm(context, key);\n        if (predicate) {\n            const objects = await util.valueToTerm(context, key, value, depth, keys);\n            if (objects.length) {\n                for (let object of objects) {\n                    // Based on parent key, check if reverse, embedded, and annotation.\n                    let parentKey = await util.unaliasKeywordParent(keys, depth);\n                    const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, parentKey);\n                    let parentDepthOffset = 0;\n                    while (parentKey === '@reverse' || typeof parentKey === 'number') {\n                        // Check parent of parent when checking while we're in an array or in @reverse\n                        if (typeof parentKey === 'number') {\n                            parentDepthOffset++;\n                        }\n                        else {\n                            depth--;\n                        }\n                        parentKey = await util.unaliasKeywordParent(keys, depth - parentDepthOffset);\n                    }\n                    const isEmbedded = Util_1.Util.isPropertyInEmbeddedNode(parentKey);\n                    util.validateReverseInEmbeddedNode(key, reverse, isEmbedded);\n                    const isAnnotation = Util_1.Util.isPropertyInAnnotationObject(parentKey);\n                    if (value) {\n                        // Special case if our term was defined as an @list, but does not occur in an array,\n                        // In that case we just emit it as an RDF list with a single element.\n                        const listValueContainer = '@list' in Util_1.Util.getContextValueContainer(context, key);\n                        if (listValueContainer || value['@list']) {\n                            if (((listValueContainer && !Array.isArray(value) && !value['@list'])\n                                || (value['@list'] && !Array.isArray(value['@list'])))\n                                && object !== util.rdfNil) {\n                                const listPointer = util.dataFactory.blankNode();\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfRest, util.rdfNil, util.getDefaultGraph()));\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfFirst, object, util.getDefaultGraph()));\n                                object = listPointer;\n                            }\n                            // Lists are not allowed in @reverse'd properties\n                            if (reverse && !parsingContext.allowSubjectList) {\n                                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal list value in subject position at ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n                            }\n                        }\n                    }\n                    await EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse, isEmbedded, isAnnotation);\n                }\n            }\n        }\n    }\n}\nexports.EntryHandlerPredicate = EntryHandlerPredicate;\n//# sourceMappingURL=EntryHandlerPredicate.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeyword = void 0;\n/**\n * An abstract keyword entry handler.\n */\nclass EntryHandlerKeyword {\n    constructor(keyword) {\n        this.keyword = keyword;\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return key === this.keyword;\n    }\n}\nexports.EntryHandlerKeyword = EntryHandlerKeyword;\n//# sourceMappingURL=EntryHandlerKeyword.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordAnnotation = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Handles @annotation entries.\n */\nclass EntryHandlerKeywordAnnotation extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@annotation');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Validate value\n        if (typeof value === 'string' || (typeof value === 'object' && value['@value'])) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal annotation value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n        }\n        // Rest of the processing is done as regular nodes\n    }\n}\nexports.EntryHandlerKeywordAnnotation = EntryHandlerKeywordAnnotation;\n//# sourceMappingURL=EntryHandlerKeywordAnnotation.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @context entries.\n */\nclass EntryHandlerKeywordContext extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@context');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Error if an out-of-order context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (parsingContext.processingStack[depth]\n                || parsingContext.processingType[depth]\n                || parsingContext.idStack[depth] !== undefined)) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // Find the parent context to inherit from.\n        // We actually request a context for the current depth (with fallback to parent)\n        // because we want to take into account any property-scoped contexts that are defined for this depth.\n        const parentContext = parsingContext.getContext(keys);\n        // Set the context for this scope\n        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n        parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n        parsingContext.emitContext(value);\n        await parsingContext.validateContext(await context);\n    }\n}\nexports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;\n//# sourceMappingURL=EntryHandlerKeywordContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordGraph = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordGraph extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@graph');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // The current identifier identifies a graph for the deeper level.\n        parsingContext.graphStack[depth + 1] = true;\n    }\n}\nexports.EntryHandlerKeywordGraph = EntryHandlerKeywordGraph;\n//# sourceMappingURL=EntryHandlerKeywordGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordId = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @id entries.\n */\nclass EntryHandlerKeywordId extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@id');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'string') {\n            // JSON-LD-star allows @id object values\n            if (parsingContext.rdfstar && typeof value === 'object') {\n                const valueKeys = Object.keys(value);\n                if (valueKeys.length === 1 && valueKeys[0] === '@id') {\n                    parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid embedded node without property with @id ${value['@id']}`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE));\n                }\n            }\n            else {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));\n            }\n            return;\n        }\n        // Determine the canonical place for this id.\n        // For example, @nest parents should be ignored.\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        // Error if an @id for this node already existed.\n        if (parsingContext.idStack[depthProperties] !== undefined) {\n            if (parsingContext.idStack[depthProperties][0].listHead) {\n                // Error if an @list was already defined for this node\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));\n            }\n            else {\n                // Otherwise, the previous id was just because of an @id entry.\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext\n                    .idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));\n            }\n        }\n        // Error if an annotation was defined\n        if (parsingContext.rdfstar && parsingContext.annotationsBuffer[depth]) {\n            for (const annotation of parsingContext.annotationsBuffer[depth]) {\n                if (annotation.depth === depth) {\n                    parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @id inside an annotation: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n                }\n            }\n        }\n        // Save our @id on the stack\n        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));\n    }\n}\nexports.EntryHandlerKeywordId = EntryHandlerKeywordId;\n//# sourceMappingURL=EntryHandlerKeywordId.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordIncluded = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @included entries.\n */\nclass EntryHandlerKeywordIncluded extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@included');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n        if ('@value' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        if ('@list' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;\n//# sourceMappingURL=EntryHandlerKeywordIncluded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordNest = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @nest entries.\n */\nclass EntryHandlerKeywordNest extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@nest');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        if ('@value' in await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys))) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an invalid @value node for '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordNest = EntryHandlerKeywordNest;\n//# sourceMappingURL=EntryHandlerKeywordNest.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordType = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../../Util\");\nconst EntryHandlerPredicate_1 = require(\"../EntryHandlerPredicate\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordType extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@type');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keyOriginal = keys[depth];\n        // The current identifier identifies an rdf:type predicate.\n        // But we only emit it once the node closes,\n        // as it's possible that the @type is used to identify the datatype of a literal, which we ignore here.\n        const context = await parsingContext.getContext(keys);\n        const predicate = util.rdfType;\n        const parentKey = await util.unaliasKeywordParent(keys, depth);\n        const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, parentKey);\n        const isEmbedded = Util_1.Util.isPropertyInEmbeddedNode(parentKey);\n        util.validateReverseInEmbeddedNode(key, reverse, isEmbedded);\n        const isAnnotation = Util_1.Util.isPropertyInAnnotationObject(parentKey);\n        // Handle multiple values if the value is an array\n        const elements = Array.isArray(value) ? value : [value];\n        for (const element of elements) {\n            if (typeof element !== 'string') {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @type '${element}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPE_VALUE));\n            }\n            const type = util.createVocabOrBaseTerm(context, element);\n            if (type) {\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, type, reverse, isEmbedded, isAnnotation);\n            }\n        }\n        // Collect type-scoped contexts if they exist\n        let scopedContext = Promise.resolve(context);\n        let hasTypedScopedContext = false;\n        for (const element of elements.sort()) { // Spec requires lexicographical ordering\n            const typeContext = Util_1.Util.getContextValue(context, '@context', element, null);\n            if (typeContext) {\n                hasTypedScopedContext = true;\n                scopedContext = scopedContext.then((c) => parsingContext.parseContext(typeContext, c.getContextRaw()));\n            }\n        }\n        // Error if an out-of-order type-scoped context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (hasTypedScopedContext || !parsingContext.streamingProfileAllowOutOfOrderPlainType)\n            && (parsingContext.processingStack[depth] || parsingContext.idStack[depth])) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order type-scoped context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // If at least least one type-scoped context applies, set them in the tree.\n        if (hasTypedScopedContext) {\n            // Do not propagate by default\n            scopedContext = scopedContext.then((c) => {\n                // Set the original context at this depth as a fallback\n                // This is needed when a context was already defined at the given depth,\n                // and this context needs to remain accessible from child nodes when propagation is disabled.\n                if (c.getContextRaw()['@propagate'] !== true) {\n                    return new jsonld_context_parser_1.JsonLdContextNormalized(Object.assign(Object.assign({}, c.getContextRaw()), { '@propagate': false, '@__propagateFallback': context.getContextRaw() }));\n                }\n                return c;\n            });\n            // Set the new context in the context tree\n            parsingContext.contextTree.setContext(keys.slice(0, keys.length - 1), scopedContext);\n        }\n        // Flag that type has been processed at this depth\n        parsingContext.processingType[depth] = true;\n    }\n}\nexports.EntryHandlerKeywordType = EntryHandlerKeywordType;\n//# sourceMappingURL=EntryHandlerKeywordType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordUnknownFallback = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * A catch-all for keywords, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerKeywordUnknownFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = await util.unaliasKeyword(keys[depth], keys, depth);\n        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            // Don't emit anything inside free-floating lists\n            if (!inProperty) {\n                if (key === '@list') {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return jsonld_context_parser_1.Util.isPotentialKeyword(key);\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keywordType = EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];\n        if (keywordType !== undefined) {\n            if (keywordType && typeof value !== keywordType.type) {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));\n            }\n        }\n        else if (parsingContext.strictValues) {\n            parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nEntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {\n    '@index': { type: 'string', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },\n    '@list': null,\n    '@reverse': { type: 'object', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },\n    '@set': null,\n    '@value': null,\n};\nexports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;\n//# sourceMappingURL=EntryHandlerKeywordUnknownFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordValue = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @value entries.\n */\nclass EntryHandlerKeywordValue extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@value');\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        // If this is @value, mark it so in the stack so that no deeper handling of nodes occurs.\n        const key = keys[depth];\n        if (key && !parsingContext.literalStack[depth] && await this.test(parsingContext, util, key, keys, depth)) {\n            parsingContext.literalStack[depth] = true;\n        }\n        return super.validate(parsingContext, util, keys, depth, inProperty);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return await util.unaliasKeyword(keys[depth], keys.slice(0, keys.length - 1), depth - 1, true) === '@value';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // If the value is valid, indicate that we are processing a literal.\n        // The actual value will be determined at the parent level when the @value is part of an object,\n        // because we may want to take into account additional entries such as @language.\n        // See {@link Util.valueToTerm}\n        // Indicate that we are processing a literal, and that no later predicates should be parsed at this depth.\n        parsingContext.literalStack[depth] = true;\n        // Void any buffers that we may have accumulated up until now\n        delete parsingContext.unidentifiedValuesBuffer[depth];\n        delete parsingContext.unidentifiedGraphsBuffer[depth];\n        // Indicate that we have not emitted at this depth\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordValue = EntryHandlerKeywordValue;\n//# sourceMappingURL=EntryHandlerKeywordValue.js.map","import rdf from '@rdfjs/data-model'\nimport toReadable from 'duplex-to/readable.js'\nimport { JsonLdParser } from 'jsonld-streaming-parser'\nimport { Transform } from 'readable-stream'\n\nconst relativeIriProtocol = 'null:'\n\nfunction termCleanup (factory) {\n  return term => {\n    if (term.termType !== 'NamedNode') {\n      return null\n    }\n\n    if (!term.value.startsWith(relativeIriProtocol)) {\n      return null\n    }\n\n    // remove dummy protocol workaround for relative IRIs\n    return factory.namedNode(term.value.slice(relativeIriProtocol.length))\n  }\n}\n\nfunction quadCleanup (factory) {\n  const cleanup = termCleanup(factory)\n\n  return quad => {\n    const subject = cleanup(quad.subject)\n    const predicate = cleanup(quad.predicate)\n    const object = cleanup(quad.object)\n    const graph = cleanup(quad.graph)\n\n    if (subject || predicate || object || graph) {\n      return factory.quad(\n        subject || quad.subject,\n        predicate || quad.predicate,\n        object || quad.object,\n        graph || quad.graph\n      )\n    }\n\n    return quad\n  }\n}\n\nclass ParserStream {\n  constructor (input, { baseIRI = relativeIriProtocol, context = null, documentLoader, factory = rdf } = {}) {\n    const parser = new JsonLdParser({\n      baseIRI,\n      context,\n      dataFactory: factory,\n      documentLoader,\n      streamingProfile: false\n    })\n\n    input.pipe(parser)\n\n    const cleanup = quadCleanup(factory)\n\n    const transform = new Transform({\n      objectMode: true,\n      transform: (quad, encoding, callback) => {\n        callback(null, cleanup(quad))\n      }\n    })\n\n    parser.on('context', context => {\n      Object.entries(context).forEach(([prefix, iri]) => {\n        transform.emit('prefix', prefix, factory.namedNode(iri))\n      })\n    })\n    parser.on('error', err => transform.destroy(err))\n    parser.pipe(transform)\n\n    return toReadable(transform)\n  }\n}\n\nexport default ParserStream\n","import Sink from '@rdfjs/sink'\nimport ParserStream from './lib/ParserStream.js'\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nexport default Parser\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, { ...this.options, ...options })\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', err => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nexport default Sink\n","const blackList = new Set(['_write', '_writableState', 'writable'])\n\nfunction readable (duplex) {\n  return new Proxy(duplex, {\n    has (target, key) {\n      if (blackList.has(key)) {\n        return false\n      }\n\n      return Reflect.has(...arguments)\n    },\n    get (target, key) {\n      if (blackList.has(key)) {\n        return undefined\n      }\n\n      const result = Reflect.get(...arguments)\n\n      if (result && typeof result.bind === 'function') {\n        return result.bind(target)\n      }\n\n      return result\n    },\n    set (target, key, value) {\n      if (blackList.has(key)) {\n        return undefined\n      }\n\n      return Reflect.set(...arguments)\n    }\n  })\n}\n\nexport default readable\n"],"names":["Buffer","C","LEFT_BRACE","RIGHT_BRACE","LEFT_BRACKET","RIGHT_BRACKET","COLON","COMMA","TRUE","FALSE","NULL","STRING","NUMBER","START","STOP","TRUE1","TRUE2","TRUE3","FALSE1","FALSE2","FALSE3","FALSE4","NULL1","NULL2","NULL3","NUMBER1","NUMBER3","STRING1","STRING2","STRING3","STRING4","STRING5","STRING6","VALUE","KEY","OBJECT","ARRAY","BACK_SLASH","charCodeAt","FORWARD_SLASH","BACKSPACE","FORM_FEED","NEWLINE","CARRIAGE_RETURN","TAB","STRING_BUFFER_SIZE","alloc","size","Parser","this","tState","value","undefined","string","stringBuffer","stringBufferOffset","unicode","highSurrogate","key","mode","stack","state","bytes_remaining","bytes_in_sequence","temp_buffs","offset","toknam","code","keys","Object","i","l","length","toString","proto","prototype","onError","err","charError","buffer","Error","JSON","stringify","String","fromCharCode","appendStringChar","char","appendStringBuf","buf","start","end","copy","write","n","onToken","j","k","byteLength","intVal","parseInt","error","numberReviver","token","parseError","push","pop","parent","emit","onValue","text","result","Number","isNaN","match","module","exports","__createBinding","create","o","m","k2","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__exportStar","p","hasOwnProperty","call","ContextParser","relative_to_absolute_iri_1","ErrorCoded_1","FetchDocumentLoader_1","JsonLdContextNormalized_1","Util_1","constructor","options","documentLoader","FetchDocumentLoader","documentCache","validateContext","skipValidation","expandContentTypeToBase","remoteContextsDepthLimit","redirectSchemaOrgHttps","validateLanguage","strictRange","errorCode","ErrorCoded","Util","REGEX_LANGUAGE_TAG","test","validateDirection","strictValues","ERROR_CODES","INVALID_BASE_DIRECTION","REGEX_DIRECTION_TAG","idifyReverseTerms","context","isValidKeyword","INVALID_IRI_MAPPING","assign","isPotentialKeyword","expandPrefixedTerms","contextRaw","getContextRaw","EXPAND_KEYS_BLACKLIST","indexOf","isReservedInternalKeyword","keyValue","ALIAS_DOMAIN_BLACKLIST","KEYWORD_REDEFINITION","ALIAS_RANGE_BLACKLIST","getContextValueId","INVALID_KEYWORD_ALIAS","INVALID_TERM_DEFINITION","isPrefixValue","changed","expandTerm","id","type","canAddIdEntry","isValidIri","newId","expandedType","normalize","processingMode","normalizeLanguageTags","toLowerCase","lowercase","containersToHash","Array","isArray","newValue","containerValue","applyScopedProtected","expandOptions","isTermProtected","isSimpleTermDefinitionPrefix","validateKeywordRedefinitions","contextBefore","contextAfter","deepEqual","PROTECTED_TERM_REDEFINITION","validate","valueType","substr","INVALID_VOCAB_MAPPING","INVALID_BASE_IRI","INVALID_DEFAULT_LANGUAGE","INVALID_VERSION_VALUE","INVALID_CONTEXT_ENTRY","INVALID_PROPAGATE_VALUE","getPrefix","CYCLIC_IRI_MAPPING","isValidIriWeak","JsonLdContextNormalized","isCompactIri","objectKey","objectValue","INVALID_TYPE_MAPPING","INVALID_REVERSE_PROPERTY","CONTAINERS_1_0","join","INVALID_CONTAINER_MAPPING","CONTAINERS","INVALID_LANGUAGE_MAPPING","INVALID_PREFIX_VALUE","INVALID_NEST_VALUE","applyBaseEntry","inheritFromParent","parentContext","baseIRI","external","resolve","normalizeContextIri","contextIri","_a","startsWith","parseInnerContexts","ignoreScopedContexts","parse","ignoreProtection","ignoreRemoteScopedContexts","e","message","INVALID_SCOPED_CONTEXT","minimalProcessing","internalOptions","DEFAULT_PROCESSING_MODE","remoteContexts","CONTEXT_OVERFLOW","hasProtectedTerms","INVALID_CONTEXT_NULLIFICATION","overriddenLoad","getOverriddenLoad","parsedStringContext","load","contextIris","contexts","Promise","all","map","subContext","reducedContexts","reduce","accContextPromise","contextEntry","then","accContext","importContext","INVALID_IMPORT_VALUE","loadImportContext","defaultExpandOptions","newContext","overlappingKeys","newContextWrapped","INVALID_LOCAL_CONTEXT","url","cached","document","LOADING_REMOTE_CONTEXT_FAILED","INVALID_REMOTE_CONTEXT","RECURSIVE_CONTEXT_INCLUSION","importContextIri","super","http_link_header_1","fetcher","response","fetch","headers","Headers","accept","ok","mediaType","colonPos","json","has","alternateUrl","forEach","linkHeader","link","rel","uri","LOADING_DOCUMENT_FAILED","statusText","status","term","expandVocab","contextValue","validIriMapping","prefix","vocab","vocabRelative","base","potentialKeyword","contextPrefixValue","allowPrefixForcing","allowVocabRelativeToBase","compactIri","iri","shortestPrefixing","suffix","allowPrefixNonGenDelims","separatorPos","charAt","isPrefixIriEndingWithGenDelim","keyword","KEYWORD_REGEX","prefixIri","ENDS_WITH_GEN_DELIM","Boolean","IRI_REGEX","IRI_REGEX_WEAK","VALID_KEYWORDS","object1","object2","objKeys1","objKeys2","every","value1","value2","ContextTree","subTrees","getContext","head","tail","subTree","depth","setContext","removeContext","path","JsonLdParser","jsonld_context_parser_1","readable_stream_1","EntryHandlerArrayValue_1","EntryHandlerContainer_1","EntryHandlerInvalidFallback_1","EntryHandlerPredicate_1","EntryHandlerKeywordContext_1","EntryHandlerKeywordGraph_1","EntryHandlerKeywordId_1","EntryHandlerKeywordIncluded_1","EntryHandlerKeywordNest_1","EntryHandlerKeywordType_1","EntryHandlerKeywordUnknownFallback_1","EntryHandlerKeywordValue_1","ParsingContext_1","EntryHandlerKeywordAnnotation_1","Transform","readableObjectMode","parsingContext","ParsingContext","parser","util","dataFactory","jsonParser","contextJobs","typeJobs","contextAwaitingJobs","lastDepth","lastKeys","lastOnValueJob","attachJsonParserListeners","on","fromHttpResponse","streamingProfile","wellKnownMediaTypes","includes","endsWith","MULTIPLE_CONTEXT_LINK_HEADERS","ignoreMissingContextLinkHeader","contentType","exec","import","stream","parsed","pipe","output","PassThrough","data","_transform","chunk","encoding","callback","newOnValueJob","lastDepthCheck","flushStacks","listPointer","listPointerStack","quad","rdfRest","rdfNil","getDefaultGraph","listId","listHead","idStack","listRootDepth","splice","EntryHandlerContainer","isBufferableContainerHandler","pendingContainerFlushBuffers","slice","flushBuffer","unaliasKeyword","parentKey","unaliasKeywordParent","emittedStack","handleKey","INVALID_REVERSE_PROPERTY_MAP","inProperty","validationStack","property","Math","max","validationResult","validateKey","valid","isLiteral","entryHandler","ENTRY_HANDLERS","testResult","handle","isStackProcessor","processingStack","validateValueIndexes","unaliasedKeywordCacheStack","processingType","graphStack","graphContainerTermStack","jsonLiteralStack","literalStack","annotationsBuffer","subjects","subjectsWasDefined","blankNode","valueBuffer","unidentifiedValuesBuffer","subject","depthOffsetGraph","getDepthOffsetGraph","graphs","getGraphContainerValue","graph","bufferedValue","emitQuadChecked","predicate","object","reverse","isEmbedded","subGraphBuffer","getUnidentifiedGraphBufferSafe","graphBuffer","unidentifiedGraphsBuffer","termType","topLevelProperties","emitQuad","emitError","INVALID_ANNOTATION","annotationsBufferParent","getAnnotationsBufferSafe","annotation","isPropertyHandler","fill","v","isParsingContextInner","valueJobCb","contextTree","jobs","job","executeBufferedJobs","applicableTypeJobs","applicableTypeJobIds","typeJob","isPrefixArray","sortedTypeJobs","sort","job1","job2","sortedApplicableTypeJobIds","jobId","EntryHandlerArrayValue","EntryHandlerKeywordContext","EntryHandlerKeywordId","EntryHandlerKeywordIncluded","EntryHandlerKeywordGraph","EntryHandlerKeywordNest","EntryHandlerKeywordType","EntryHandlerKeywordValue","EntryHandlerKeywordAnnotation","EntryHandlerKeywordUnknownFallback","EntryHandlerPredicate","EntryHandlerInvalidFallback","ContextTree_1","JsonLdParser_1","contextParser","skipContextValidation","produceGeneralizedRdf","allowSubjectList","defaultGraph","rdfDirection","streamingProfileAllowOutOfOrderPlainType","rdfstar","rdfstarReverseInEmbedded","activeProcessingMode","parseFloat","rootContext","parseContext","activeVersion","PROCESSING_MODE_CONFLICT","keysOriginal","contextData","getContextPropagationAware","contextKeyEntry","scopedContext","propagate","originalDepth","hasApplicablePropertyScopedContext","lastKey","lastKeyValue","handlePendingContainerFlushBuffers","pendingFlushBuffer","emitContext","getUnidentifiedValueBufferSafe","getExpandOptions","EXPAND_OPTIONS","shiftStack","depthOffset","deeperIdStack","rdf_data_factory_1","canonicalizeJson","DataFactory","rdfFirst","namedNode","RDF","rdfType","rdfJson","getContextValue","contextKey","fallback","entry","getContextValueContainer","getContextValueType","getContextValueLanguage","getContextValueDirection","isContextValueReverse","getContextValueIndex","isPropertyReverse","isPropertyInEmbeddedNode","isPropertyInAnnotationObject","needle","haystack","indexHashes","index","existingIndexValue","CONFLICTING_INDEXES","valueToTerm","literal","valueToJsonString","getContextSelfOrPropertyScoped","unaliasKeywords","val","valueLanguage","valueDirection","valueIndex","subValue","INVALID_VALUE_OBJECT","INVALID_VALUE_OBJECT_VALUE","INVALID_INDEX_VALUE","INVALID_LANGUAGE_TAGGED_VALUE","INVALID_LANGUAGE_TAGGED_STRING","nullableTermToArray","createLanguageDirectionLiteral","INVALID_TYPED_VALUE","typeTerm","createVocabOrBaseTerm","INVALID_SET_OR_LIST_OBJECT","listValue","graphContainerEntries","values","valueId","valueTerm","INVALID_ID_VALUE","resourceToTerm","stringValueToTerm","XSD_BOOLEAN","XSD_INTEGER","XSD_DOUBLE","predicateToTerm","expanded","intToString","datatype","isFinite","isInteger","toExponential","replace","defaultDatatype","contextType","contextLanguage","contextDirection","language","direction","valueNode","disableCache","cachedUnaliasedKeyword","unliased","hash","newHash","containers","getContainerHandler","isComplexGraphContainer","validateReverseSubject","INVALID_REVERSE_PROPERTY_VALUE","depthContainer","graphContainerIndex","getContainerGraphIndex","graphId","keyUnaliased","getContainerKey","getPropertiesDepth","lastValidDepth","validateReverseInEmbeddedNode","INVALID_EMBEDDED_NODE","emitAnnotation","annotationQuad","nestedAnnotation","nestedAnnotations","XSD","ContainerHandlerIdentifier","canCombineWithGraph","maybeId","ids","some","equals","ContainerHandlerIndex","graphContainer","indexKey","indexPropertyRaw","indexProperty","indexValues","indexValue","handlePredicateObject","ContainerHandlerLanguage","INVALID_LANGUAGE_MAP_VALUE","ContainerHandlerType","containerTypeType","entryHasIdentifier","keyOriginal","listRootKey","keyOption","handleListElement","valueOriginal","listRootKeys","newLinkTerm","linkTerm","ContainerHandlerIdentifier_1","ContainerHandlerIndex_1","ContainerHandlerLanguage_1","ContainerHandlerType_1","isSimpleGraphContainer","checkGraphContainer","containersSelf","containersParent","containerHandleName","CONTAINER_HANDLERS","handler","containerName","isAnnotation","depthProperties","depthPropertiesGraph","atGraph","newAnnotation","existingAnnotation","objects","parentDepthOffset","listValueContainer","EntryHandlerKeyword","EntryHandlerKeyword_1","INVALID_STREAMING_KEY_ORDER","valueKeys","COLLIDING_KEYWORDS","INVALID_INCLUDED_VALUE","valueUnliased","elements","element","INVALID_TYPE_VALUE","hasTypedScopedContext","typeContext","c","keywordType","VALID_KEYWORDS_TYPES","INVALID_REVERSE_VALUE","relativeIriProtocol","termCleanup","factory","quadCleanup","cleanup","ParserStream","input","transform","objectMode","entries","destroy","Sink","Impl","readable","blackList","Set","duplex","Proxy","target","Reflect","arguments","bind","set"],"sourceRoot":""}